---
description: 
globs: 
alwaysApply: false
---
# Personal Strategic Intelligence System - Complete Implementation Plan

## Project Overview

Build an AI-powered system that transforms personal communication data (emails, calendar, contacts) into a living strategic intelligence platform. The system creates a contact-centric knowledge graph that continuously learns and provides predictive insights for professional relationships and decision-making.

## Core Innovation

Instead of traditional NLP/search, we use Claude Opus 4 as the core intelligence engine, treating it as a team of specialized analysts who understand nuance, strategy, and hidden connections in human communication.

## System Architecture

### 1. Data Sources & Ingestion Layer

**Primary Sources:**
- Gmail API (emails - sent/received)
- Google Calendar API (events, attendees)
- Google Contacts API (contact details)

**Web Intelligence Sources:**
- LinkedIn (via web scraping workers)
- Twitter/X (via web scraping workers)
- Company websites (via web scraping workers)
- News/tech blogs (via web scraping workers)

**Future Sources (built with extensibility in mind):**
- Google Drive documents
- Slack/Discord APIs
- Notion API
- GitHub repositories
- CRM systems

### 2. Processing Pipeline

**Phase 1: Contact Discovery & Enrichment**
```
Input: Email sent items
Process:
1. Extract all email addresses from sent items
2. Build "trusted contacts" list (people you've actually emailed)
3. Deploy parallel web workers:
   - LinkedIn Worker: Extract profile, role, company, recent posts
   - Twitter Worker: Find handle, recent tweets, interests
   - Company Worker: Fetch company info, team, funding
4. Store enriched contacts with social context

Output: Enriched contact list with professional context
```

**Phase 2: Knowledge Tree Construction (Claude Opus 4)**
```
Input: Emails filtered by trusted contacts + enriched contact data
Process:
1. Batch emails by time windows (30-day chunks)
2. Send to specialized Claude workers:
   - Business Strategy Analyst: Extract strategic decisions, rationale
   - Relationship Dynamics Analyst: Map influence, communication patterns
   - Technical Evolution Analyst: Track product/tech decisions
   - Market Intelligence Analyst: Identify opportunities, threats
3. Each worker outputs structured insights
4. Merge into hierarchical knowledge tree

Output: Multi-dimensional knowledge tree with strategic insights
```

**Phase 3: Deep Augmentation Pass**
```
Input: Knowledge tree + original emails
Process:
1. For each node in knowledge tree:
   - Extract supporting evidence
   - Build temporal evolution
   - Identify causality chains
   - Extract learnings and patterns
2. Cross-reference across different branches
3. Identify hidden connections

Output: Augmented tree with deep context and evidence
```

**Phase 4: Calendar Integration**
```
Input: Calendar events + augmented knowledge tree
Process:
1. Match attendees to enriched contacts
2. Link events to knowledge tree topics
3. Extract meeting patterns
4. Add pre/post meeting context from emails
5. Identify decision points from meeting clusters

Output: Time-aware knowledge graph
```

**Phase 5: Predictive Intelligence Layer**
```
Input: Complete knowledge graph
Process:
1. Claude analyzes patterns for:
   - Relationship trajectory predictions
   - Optimal timing for actions
   - Risk identification
   - Opportunity alerts
2. Generate actionable recommendations
3. Create priority queues for follow-ups

Output: Predictive insights and recommendations
```

### 3. Storage Architecture

**Vector Database (ChromaDB):**
- Collections: emails, contacts, topics, insights, predictions
- Multiple embedding types: semantic, temporal, entity
- Metadata indices for fast filtering

**Graph Database (Neo4j):**
- Nodes: People, Companies, Projects, Topics, Events
- Edges: Relationships with temporal properties
- Enables complex relationship queries

**Cache Layer (Redis):**
- Recent queries
- Active analysis results
- Real-time updates queue

**Object Storage (S3/MinIO):**
- Original email content
- Extracted attachments
- Generated reports

### 4. Intelligence Workers

**Web Scraping Workers (Playwright/Puppeteer):**
```python
LinkedInWorker:
  - Input: Contact name + company
  - Process: Search LinkedIn, extract profile data
  - Output: Current role, bio, recent activity
  
TwitterWorker:
  - Input: Contact name/email
  - Process: Search Twitter, find handle, extract tweets
  - Output: Handle, interests, recent topics
  
CompanyIntelWorker:
  - Input: Company name/domain
  - Process: Fetch website, news, funding info
  - Output: Company size, focus, recent news
```

**Claude Analysis Workers:**
```python
StrategicAnalyst:
  - Prompt: "Analyze these emails for strategic decisions, rationale, and outcomes"
  - Focus: Business strategy, market positioning
  
RelationshipAnalyst:
  - Prompt: "Map relationship dynamics, influence patterns, and communication health"
  - Focus: People dynamics, influence networks
  
TechnicalAnalyst:
  - Prompt: "Extract technical decisions, architecture choices, and evolution"
  - Focus: Product/tech decisions and reasoning
  
MarketAnalyst:
  - Prompt: "Identify market signals, competitive intelligence, and timing factors"
  - Focus: External factors, opportunities, threats
  
PredictiveAnalyst:
  - Prompt: "Based on patterns, predict likely outcomes and optimal actions"
  - Focus: Future scenarios, recommendations
```

### 5. Chat Interface Architecture

**Query Understanding:**
1. Classify query type (relationship, historical, predictive, advisory)
2. Extract entities and time ranges
3. Determine required context depth

**Context Retrieval:**
1. Vector similarity search for relevant content
2. Graph traversal for relationship context
3. Temporal filtering for time-specific queries
4. Merge and rank results

**Response Generation:**
1. Pass context to Claude with appropriate persona
2. Include supporting evidence and citations
3. Add actionable recommendations
4. Update learning system with query patterns

### 6. Continuous Learning Pipeline

**Real-time Updates:**
- Email webhook listener
- Calendar sync every 15 minutes
- Social media checks every hour

**Incremental Processing:**
1. New emails → Update contact interactions
2. Extract new entities/topics
3. Update relationship strengths
4. Re-run predictive analysis if significant changes

**Periodic Deep Analysis:**
- Daily: Update social media intelligence
- Weekly: Re-analyze relationship trajectories
- Monthly: Full knowledge tree reconstruction
- Quarterly: Strategic pattern analysis

### 7. Technical Implementation Details

**Infrastructure:**
- Docker Compose for development
- Kubernetes for production
- Horizontal scaling for workers
- Event-driven architecture (Celery + Redis)

**APIs and Libraries:**
```python
# Core
- FastAPI (REST API)
- Celery (task queue)
- Redis (cache/queue)
- PostgreSQL (metadata)

# Google APIs
- google-auth
- google-api-python-client

# AI/ML
- anthropic (Claude API)
- chromadb (vector store)
- neo4j (graph database)
- spacy (NLP)
- scikit-learn (clustering)

# Web Intelligence
- playwright (web scraping)
- beautifulsoup4 (parsing)
- httpx (async requests)

# Utils
- pydantic (data validation)
- msgpack (serialization)
- structlog (logging)
```

**Security & Privacy:**
- All data encrypted at rest
- API authentication via JWT
- Row-level security in database
- Audit logs for all access
- GDPR compliance tools

### 8. Deployment Phases

**Phase 1 (Weeks 1-2): Core Infrastructure**
- Set up Google API authentication
- Build contact extraction pipeline
- Implement basic web enrichment
- Create data storage layer

**Phase 2 (Weeks 3-4): Claude Intelligence**
- Implement Claude worker system
- Build knowledge tree construction
- Create augmentation pipeline
- Test with sample data

**Phase 3 (Weeks 5-6): Predictive Layer**
- Add calendar integration
- Build predictive analytics
- Create recommendation engine
- Implement priority system

**Phase 4 (Weeks 7-8): Chat Interface**
- Build query understanding
- Implement context retrieval
- Create response generation
- Add conversation memory

**Phase 5 (Weeks 9-10): Production Readiness**
- Add monitoring/alerting
- Implement backup/recovery
- Performance optimization
- Security hardening

**Phase 6 (Ongoing): Continuous Improvement**
- Add new data sources
- Refine Claude prompts
- Improve predictions
- Expand web intelligence

### 9. Key Innovations

1. **Contact-Centric Architecture**: Everything revolves around people you actually interact with
2. **Multi-Modal Intelligence**: Combines email, calendar, and web data for 360° view
3. **Claude as Core Engine**: Using LLM for nuanced understanding vs traditional NLP
4. **Predictive Capabilities**: Goes beyond search to predict and recommend
5. **Living Knowledge Graph**: Continuously updates and learns
6. **Specialized AI Workers**: Multiple Claude personas for different analysis types
7. **Web Intelligence Integration**: Real-time social media and web monitoring

### 10. Success Metrics

- Query response time < 2 seconds
- Prediction accuracy > 75%
- Contact enrichment rate > 90%
- Knowledge extraction depth (entities per email > 5)
- User engagement (queries per day)
- Actionable insights generated per week

### 11. Example Queries & Capabilities

**Relationship Queries:**
- "What's my history with Jake?"
- "Who should I follow up with this week?"
- "Which investors are most engaged?"

**Strategic Queries:**
- "What were our key decisions in Q1?"
- "How has our fundraising strategy evolved?"
- "What patterns lead to successful meetings?"

**Predictive Queries:**
- "Will Jake invest based on current trajectory?"
- "When should I reach out to Michael?"
- "What risks should I watch for?"

**Intelligence Queries:**
- "What are my contacts saying on LinkedIn?"
- "Any market signals I should know about?"
- "Who in my network can help with X?"

This system transforms personal communication from a passive archive into an active strategic intelligence platform that helps navigate professional relationships and make better decisions.