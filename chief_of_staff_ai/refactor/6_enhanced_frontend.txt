<a href="/tasks" class="nav-link flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-[#223649] rounded-full transition-colors">
                                    <div class="text-white">‚ö°</div>
                                    <p class="text-white text-sm font-medium leading-normal">Context Tasks</p>
                                </a>
                                
                                <a href="/calendar" class="nav-link flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-[#223649] rounded-full transition-colors">
                                    <div class="text-white">üìÖ</div>
                                    <p class="text-white text-sm font-medium leading-normal">Smart Calendar</p>
                                </a>
                            </div>
                        </div>
                        
                        <!-- Real-Time Intelligence Actions -->
                        <div class="space-y-3">
                            <button id="unifiedSyncBtn" class="w-full flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full text-sm font-bold hover:from-blue-700 hover:to-purple-700 transition-all">
                                <span class="text-lg">üöÄ</span>
                                <span>Unified Intelligence Sync</span>
                            </button>
                            
                            <button id="generateInsightsBtn" class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-[#223649] text-white rounded-full text-sm font-medium hover:bg-[#314d68] transition-colors">
                                <span>üß†</span>
                                <span>Generate Insights</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Main Intelligence Dashboard -->
                <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
                    <!-- Dashboard Header -->
                    <div class="px-4 py-6">
                        <div class="flex items-center justify-between mb-4">
                            <div>
                                <h1 class="text-3xl font-bold text-white mb-2">üß† Intelligence Dashboard</h1>
                                <p class="text-[#90aecb] text-lg">Your AI-powered business intelligence center with real-time entity connections</p>
                            </div>
                            <div class="text-right">
                                <div class="text-[#90aecb] text-sm">Last Intelligence Update</div>
                                <div id="lastUpdateTime" class="text-white font-medium">--</div>
                            </div>
                        </div>
                        
                        <!-- Real-Time Intelligence Metrics -->
                        <div class="grid grid-cols-4 gap-4 mb-8">
                            <div class="bg-[#223649] p-4 rounded-lg border border-[#314d68] intelligence-card strategic-importance-high">
                                <div class="flex items-center justify-between mb-2">
                                    <h3 class="text-sm font-medium text-[#90aecb]">Active Insights</h3>
                                    <span class="text-2xl">üî•</span>
                                </div>
                                <p id="activeInsights" class="text-2xl font-bold text-white">0</p>
                                <p class="text-xs text-[#90aecb] mt-1">High-priority intelligence</p>
                            </div>

                            <div class="bg-[#223649] p-4 rounded-lg border border-[#314d68] intelligence-card strategic-importance-medium">
                                <div class="flex items-center justify-between mb-2">
                                    <h3 class="text-sm font-medium text-[#90aecb]">Entity Network</h3>
                                    <span class="text-2xl">üï∏Ô∏è</span>
                                </div>
                                <p id="entityNetworkSize" class="text-2xl font-bold text-white">0</p>
                                <p class="text-xs text-[#90aecb] mt-1">Connected entities</p>
                            </div>

                            <div class="bg-[#223649] p-4 rounded-lg border border-[#314d68] intelligence-card strategic-importance-medium">
                                <div class="flex items-center justify-between mb-2">
                                    <h3 class="text-sm font-medium text-[#90aecb]">Topic Momentum</h3>
                                    <span class="text-2xl">üìà</span>
                                </div>
                                <p id="topicMomentum" class="text-2xl font-bold text-white">0%</p>
                                <p class="text-xs text-[#90aecb] mt-1">Business velocity</p>
                            </div>

                            <div class="bg-[#223649] p-4 rounded-lg border border-[#314d68] intelligence-card strategic-importance-low">
                                <div class="flex items-center justify-between mb-2">
                                    <h3 class="text-sm font-medium text-[#90aecb]">Relationship Score</h3>
                                    <span class="text-2xl">üí´</span>
                                </div>
                                <p id="relationshipScore" class="text-2xl font-bold text-white">0</p>
                                <p class="text-xs text-[#90aecb] mt-1">Network strength</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Proactive Intelligence Insights -->
                    <div class="px-4 mb-8">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-xl font-semibold text-white">üö® Proactive Intelligence</h2>
                            <div class="flex gap-2">
                                <button class="insight-filter active px-3 py-1 text-sm rounded bg-[#0b80ee] text-white" data-filter="all">All</button>
                                <button class="insight-filter px-3 py-1 text-sm rounded bg-[#223649] text-[#90aecb] hover:bg-[#314d68]" data-filter="high">High Priority</button>
                                <button class="insight-filter px-3 py-1 text-sm rounded bg-[#223649] text-[#90aecb] hover:bg-[#314d68]" data-filter="relationship">Relationships</button>
                                <button class="insight-filter px-3 py-1 text-sm rounded bg-[#223649] text-[#90aecb] hover:bg-[#314d68]" data-filter="topics">Topics</button>
                            </div>
                        </div>
                        
                        <div id="proactiveInsightsContainer" class="space-y-3">
                            <!-- Insights will be loaded here -->
                            <div class="text-center py-8 text-[#90aecb]">
                                <div class="text-4xl mb-2">üß†</div>
                                <p>AI is analyzing your business intelligence...</p>
                                <p class="text-sm mt-1">Proactive insights will appear here</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Entity Intelligence Network -->
                    <div class="px-4 mb-8">
                        <h2 class="text-xl font-semibold text-white mb-4">üï∏Ô∏è Entity Intelligence Network</h2>
                        
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <!-- Topics Brain -->
                            <div class="bg-[#223649] rounded-lg border border-[#314d68] p-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-white font-semibold">üß† Topics Brain</h3>
                                    <span class="text-xs bg-purple-600 text-white px-2 py-1 rounded-full">Central Intelligence</span>
                                </div>
                                
                                <div id="topicsBrainContainer" class="space-y-3 max-h-64 overflow-y-auto">
                                    <!-- Topics will be loaded here -->
                                </div>
                                
                                <div class="mt-4 pt-3 border-t border-[#314d68]">
                                    <button class="w-full text-center text-[#0b80ee] text-sm hover:underline" onclick="location.href='/topics'">
                                        View Full Topics Intelligence ‚Üí
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Relationship Intelligence -->
                            <div class="bg-[#223649] rounded-lg border border-[#314d68] p-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-white font-semibold">üë• Relationship Intelligence</h3>
                                    <span class="text-xs bg-green-600 text-white px-2 py-1 rounded-full">Dynamic</span>
                                </div>
                                
                                <div id="relationshipIntelContainer" class="space-y-3 max-h-64 overflow-y-auto">
                                    <!-- Relationships will be loaded here -->
                                </div>
                                
                                <div class="mt-4 pt-3 border-t border-[#314d68]">
                                    <button class="w-full text-center text-[#0b80ee] text-sm hover:underline" onclick="location.href='/people'">
                                        View Full Relationship Map ‚Üí
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Context-Aware Tasks -->
                    <div class="px-4 mb-8">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-xl font-semibold text-white">‚ö° Context-Aware Tasks</h2>
                            <div class="text-sm text-[#90aecb]">
                                <span id="tasksWithContext">0</span> tasks with business context
                            </div>
                        </div>
                        
                        <div id="contextTasksContainer" class="space-y-3">
                            <!-- Context tasks will be loaded here -->
                        </div>
                        
                        <div class="mt-4 text-center">
                            <button class="text-[#0b80ee] text-sm hover:underline" onclick="location.href='/tasks'">
                                View All Context Tasks ‚Üí
                            </button>
                        </div>
                    </div>
                    
                    <!-- AI Chat Interface -->
                    <div class="px-4 py-6 border-t border-[#314d68]">
                        <h2 class="text-xl font-semibold text-white mb-4">üí¨ Intelligence Assistant</h2>
                        
                        <div class="bg-[#223649] rounded-lg border border-[#314d68] p-4">
                            <div id="chatHistory" class="space-y-3 mb-4 max-h-64 overflow-y-auto">
                                <div class="text-[#90aecb] text-sm text-center py-4">
                                    Ask me anything about your business intelligence, relationships, or strategic insights...
                                </div>
                            </div>
                            
                            <div class="flex gap-3">
                                <input id="chatInput" type="text" 
                                       placeholder="Ask about your business intelligence..." 
                                       class="flex-1 bg-[#101a23] text-white border border-[#314d68] rounded-lg px-4 py-2 focus:outline-none focus:border-[#0b80ee] transition-colors">
                                <button id="sendChatBtn" 
                                        class="px-6 py-2 bg-[#0b80ee] text-white rounded-lg hover:bg-blue-600 transition-colors">
                                    Send
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state for real-time intelligence
        let intelligenceState = {
            entities: { topics: 0, people: 0, tasks: 0, events: 0 },
            insights: [],
            relationships: [],
            processing: false,
            lastUpdate: null
        };

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeIntelligenceDashboard();
            setupEventListeners();
            startRealTimeUpdates();
        });

        function initializeIntelligenceDashboard() {
            loadIntelligenceMetrics();
            loadProactiveInsights();
            loadEntityNetwork();
            loadContextTasks();
            updateLastUpdateTime();
        }

        function setupEventListeners() {
            // Unified sync button
            document.getElementById('unifiedSyncBtn').addEventListener('click', runUnifiedIntelligenceSync);
            
            // Generate insights button
            document.getElementById('generateInsightsBtn').addEventListener('click', generateProactiveInsights);
            
            // Chat functionality
            document.getElementById('sendChatBtn').addEventListener('click', sendIntelligenceChat);
            document.getElementById('chatInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') sendIntelligenceChat();
            });
            
            // Insight filters
            document.querySelectorAll('.insight-filter').forEach(btn => {
                btn.addEventListener('click', function() {
                    filterInsights(this.dataset.filter);
                    updateFilterButtons(this);
                });
            });
        }

        function startRealTimeUpdates() {
            // Update metrics every 30 seconds
            setInterval(() => {
                if (!intelligenceState.processing) {
                    loadIntelligenceMetrics();
                    updateLastUpdateTime();
                }
            }, 30000);
            
            // Check for new insights every 60 seconds
            setInterval(() => {
                loadProactiveInsights();
            }, 60000);
        }

        async function runUnifiedIntelligenceSync() {
            const btn = document.getElementById('unifiedSyncBtn');
            const originalText = btn.innerHTML;
            
            try {
                intelligenceState.processing = true;
                showProcessingStatus(true);
                
                btn.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div> Processing Intelligence...';
                btn.disabled = true;
                
                // Show AI thinking indicator
                document.getElementById('aiThinkingIndicator').classList.remove('hidden');
                
                const response = await fetch('/api/unified-intelligence-sync', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        max_emails: 25,
                        days_back: 7,
                        days_forward: 14,
                        force_refresh: false
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Update intelligence state
                    intelligenceState.entities = data.entity_intelligence?.entity_summary || intelligenceState.entities;
                    intelligenceState.insights = data.insights_generated || [];
                    
                    // Show detailed success message
                    showIntelligenceSuccess(data);
                    
                    // Refresh all dashboard components
                    await refreshIntelligenceDashboard();
                    
                } else {
                    showError('Intelligence sync failed: ' + (data.error || 'Unknown error'));
                }
                
            } catch (error) {
                console.error('Intelligence sync error:', error);
                showError('Failed to sync intelligence. Please try again.');
            } finally {
                intelligenceState.processing = false;
                showProcessingStatus(false);
                btn.innerHTML = originalText;
                btn.disabled = false;
                document.getElementById('aiThinkingIndicator').classList.add('hidden');
            }
        }

        async function loadIntelligenceMetrics() {
            try {
                // This would call a new endpoint for real-time metrics
                const response = await fetch('/api/intelligence-metrics');
                const data = await response.json();
                
                if (data.success) {
                    updateIntelligenceMetrics(data.metrics);
                }
            } catch (error) {
                console.error('Failed to load intelligence metrics:', error);
            }
        }

        function updateIntelligenceMetrics(metrics) {
            // Update entity counts
            document.getElementById('entityCount').textContent = metrics.total_entities || 0;
            document.getElementById('topicsCount').textContent = `${metrics.topics || 0} Topics`;
            document.getElementById('peopleCount').textContent = `${metrics.people || 0} People`;
            
            // Update intelligence score (0-100)
            const score = Math.round((metrics.intelligence_quality || 0) * 100);
            document.getElementById('intelligenceScore').textContent = score;
            document.getElementById('intelligenceProgress').style.width = score + '%';
            
            // Update other metrics
            document.getElementById('activeInsights').textContent = metrics.active_insights || 0;
            document.getElementById('entityNetworkSize').textContent = metrics.entity_relationships || 0;
            document.getElementById('topicMomentum').textContent = Math.round((metrics.topic_momentum || 0) * 100) + '%';
            document.getElementById('relationshipScore').textContent = Math.round((metrics.relationship_density || 0) * 100);
        }

        async function loadProactiveInsights() {
            try {
                const response = await fetch('/api/intelligence-insights?status=new&limit=10');
                const data = await response.json();
                
                if (data.success) {
                    displayProactiveInsights(data.insights);
                }
            } catch (error) {
                console.error('Failed to load proactive insights:', error);
            }
        }

        function displayProactiveInsights(insights) {
            const container = document.getElementById('proactiveInsightsContainer');
            
            if (!insights || insights.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-[#90aecb]">
                        <div class="text-4xl mb-2">üß†</div>
                        <p>No new insights available</p>
                        <p class="text-sm mt-1">Process more data to generate intelligence</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = insights.map(insight => createInsightCard(insight)).join('');
        }

        function createInsightCard(insight) {
            const priorityColors = {
                'high': 'border-red-500 bg-red-500 bg-opacity-10',
                'medium': 'border-yellow-500 bg-yellow-500 bg-opacity-10',
                'low': 'border-green-500 bg-green-500 bg-opacity-10'
            };
            
            const typeEmojis = {
                'relationship_alert': 'üë•',
                'topic_momentum': 'üìà',
                'meeting_prep': 'üìÖ',
                'project_attention': 'üìã',
                'important_contact': '‚≠ê',
                'urgent_task': '‚ö°'
            };
            
            const colorClass = priorityColors[insight.priority] || priorityColors['medium'];
            const emoji = typeEmojis[insight.insight_type] || 'üß†';
            
            return `
                <div class="intelligence-card bg-[#182734] rounded-lg border ${colorClass} p-4" data-insight-type="${insight.insight_type}" data-priority="${insight.priority}">
                    <div class="flex items-start gap-4">
                        <div class="text-2xl">${emoji}</div>
                        <div class="flex-1 min-w-0">
                            <div class="flex items-start justify-between gap-3">
                                <h3 class="text-white font-medium leading-tight">${escapeHtml(insight.title)}</h3>
                                <div class="flex gap-2 shrink-0">
                                    <span class="text-xs px-2 py-1 rounded-full ${getPriorityColor(insight.priority)}">${insight.priority.toUpperCase()}</span>
                                    <span class="text-xs px-2 py-1 rounded-full bg-[#314d68] text-[#90aecb]">${Math.round(insight.confidence * 100)}%</span>
                                </div>
                            </div>
                            <p class="text-[#90aecb] text-sm mt-2 leading-relaxed">${escapeHtml(insight.description)}</p>
                            <div class="flex items-center justify-between mt-3">
                                <span class="text-xs text-[#78879a]">${formatTimeAgo(insight.created_at)}</span>
                                <div class="flex gap-2">
                                    <button onclick="markInsightFeedback(${insight.id}, 'helpful')" class="text-xs px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded">üëç Helpful</button>
                                    <button onclick="markInsightFeedback(${insight.id}, 'not_helpful')" class="text-xs px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded">üëé Not helpful</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        async function loadEntityNetwork() {
            try {
                // Load topics brain
                const topicsResponse = await fetch('/api/topics?limit=5');
                const topicsData = await topicsResponse.json();
                
                if (topicsData.success) {
                    displayTopicsBrain(topicsData.topics);
                }
                
                // Load relationship intelligence
                const peopleResponse = await fetch('/api/people?limit=5');
                const peopleData = await peopleResponse.json();
                
                if (peopleData.success) {
                    displayRelationshipIntelligence(peopleData.people);
                }
                
            } catch (error) {
                console.error('Failed to load entity network:', error);
            }
        }

        function displayTopicsBrain(topics) {
            const container = document.getElementById('topicsBrainContainer');
            
            if (!topics || topics.length === 0) {
                container.innerHTML = '<div class="text-[#90aecb] text-sm text-center py-4">No topics discovered yet</div>';
                return;
            }
            
            container.innerHTML = topics.map(topic => `
                <div class="entity-connection rounded-lg p-3 hover:bg-[#314d68] transition-colors cursor-pointer">
                    <div class="flex items-center justify-between">
                        <div class="flex-1 min-w-0">
                            <h4 class="text-white font-medium text-sm truncate">${escapeHtml(topic.name)}</h4>
                            <div class="flex items-center gap-2 mt-1">
                                <span class="text-xs text-[#90aecb]">${topic.total_mentions} mentions</span>
                                ${topic.is_official ? '<span class="text-xs bg-blue-600 text-white px-2 py-1 rounded">Official</span>' : ''}
                            </div>
                        </div>
                        <div class="text-lg">${topic.activity_level > 0.7 ? 'üî•' : topic.activity_level > 0.4 ? 'üìà' : 'üìä'}</div>
                    </div>
                    ${topic.related_entities && topic.related_entities.total > 0 ? `
                        <div class="mt-2 text-xs text-[#78879a]">
                            Connected: ${topic.related_entities.people} people, ${topic.related_entities.tasks} tasks
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }

        function displayRelationshipIntelligence(people) {
            const container = document.getElementById('relationshipIntelContainer');
            
            if (!people || people.length === 0) {
                container.innerHTML = '<div class="text-[#90aecb] text-sm text-center py-4">No relationship data yet</div>';
                return;
            }
            
            container.innerHTML = people.map(person => `
                <div class="entity-connection rounded-lg p-3 hover:bg-[#314d68] transition-colors cursor-pointer">
                    <div class="flex items-center gap-3">
                        <div class="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-xs font-bold">
                            ${getInitials(person.name)}
                        </div>
                        <div class="flex-1 min-w-0">
                            <h4 class="text-white font-medium text-sm truncate">${escapeHtml(person.name)}</h4>
                            <div class="text-xs text-[#90aecb] truncate">${escapeHtml(person.company || 'Unknown company')}</div>
                        </div>
                        <div class="text-right">
                            <div class="text-xs text-[#90aecb]">${person.total_interactions} interactions</div>
                            <div class="text-xs text-yellow-400">${Math.round((person.importance_level || 0) * 100)}% importance</div>
                        </div>
                    </div>
                    ${person.relationship_intelligence ? `
                        <div class="mt-2 text-xs text-[#78879a]">
                            Strength: ${Math.round(person.relationship_intelligence.strength * 100)}% ‚Ä¢ 
                            Topics: ${person.relationship_intelligence.topic_connections}
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }

        async function loadContextTasks() {
            try {
                const response = await fetch('/api/tasks?limit=5');
                const data = await response.json();
                
                if (data.success) {
                    displayContextTasks(data.tasks);
                    document.getElementById('tasksWithContext').textContent = 
                        data.summary?.with_context || 0;
                }
            } catch (error) {
                console.error('Failed to load context tasks:', error);
            }
        }

        function displayContextTasks(tasks) {
            const container = document.getElementById('contextTasksContainer');
            
            if (!tasks || tasks.length === 0) {
                container.innerHTML = '<div class="text-[#90aecb] text-sm text-center py-4">No context tasks yet</div>';
                return;
            }
            
            container.innerHTML = tasks.slice(0, 3).map(task => `
                <div class="intelligence-card bg-[#223649] rounded-lg border border-[#314d68] p-4">
                    <div class="flex items-start justify-between gap-3">
                        <div class="flex-1 min-w-0">
                            <h4 class="text-white font-medium text-sm leading-tight">${escapeHtml(task.description)}</h4>
                            ${task.context_story ? `
                                <p class="text-[#90aecb] text-xs mt-2 leading-relaxed">${escapeHtml(task.context_story)}</p>
                            ` : ''}
                            <div class="flex items-center gap-2 mt-3">
                                <span class="text-xs px-2 py-1 rounded ${getPriorityColor(task.priority)}">${task.priority.toUpperCase()}</span>
                                ${task.related_topics.length > 0 ? `
                                    <span class="text-xs text-[#90aecb]">Topics: ${task.related_topics.slice(0, 2).join(', ')}</span>
                                ` : ''}
                            </div>
                        </div>
                        <div class="text-lg">‚ö°</div>
                    </div>
                </div>
            `).join('');
        }

        async function sendIntelligenceChat() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            const chatHistory = document.getElementById('chatHistory');
            
            // Add user message
            addChatMessage('user', message, chatHistory);
            input.value = '';
            
            // Add loading message
            const loadingId = addChatMessage('ai', 'Analyzing your business intelligence...', chatHistory);
            
            try {
                const response = await fetch('/api/chat-with-knowledge', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: message,
                        include_context: true
                    })
                });
                
                const data = await response.json();
                
                // Remove loading message
                document.getElementById(loadingId).remove();
                
                if (data.success) {
                    addChatMessage('ai', data.response, chatHistory);
                } else {
                    addChatMessage('ai', 'Sorry, I encountered an error processing your request.', chatHistory);
                }
                
            } catch (error) {
                console.error('Chat error:', error);
                document.getElementById(loadingId).remove();
                addChatMessage('ai', 'Sorry, I encountered a network error.', chatHistory);
            }
        }

        function addChatMessage(sender, message, container) {
            const messageId = 'msg-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
            const isUser = sender === 'user';
            
            const messageDiv = document.createElement('div');
            messageDiv.id = messageId;
            messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
            messageDiv.innerHTML = `
                <div class="max-w-[80%] ${isUser ? 'bg-[#0b80ee] text-white' : 'bg-[#314d68] text-white'} rounded-lg px-4 py-2">
                    <div class="text-xs opacity-70 mb-1">${isUser ? 'You' : 'AI Assistant'}</div>
                    <div class="text-sm whitespace-pre-wrap">${escapeHtml(message)}</div>
                </div>
            `;
            
            container.appendChild(messageDiv);
            container.scrollTop = container.scrollHeight;
            
            return messageId;
        }

        async function refreshIntelligenceDashboard() {
            loadIntelligenceMetrics();
            loadProactiveInsights();
            loadEntityNetwork();
            loadContextTasks();
            updateLastUpdateTime();
        }

        async function generateProactiveInsights() {
            const btn = document.getElementById('generateInsightsBtn');
            const originalText = btn.innerHTML;
            
            try {
                btn.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div> Generating...';
                btn.disabled = true;
                
                // This would trigger proactive insight generation
                const response = await fetch('/api/generate-insights', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(`Generated ${data.insights_count || 0} new insights`);
                    loadProactiveInsights();
                } else {
                    showError('Failed to generate insights');
                }
                
            } catch (error) {
                console.error('Failed to generate insights:', error);
                showError('Failed to generate insights');
            } finally {
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        }

        function filterInsights(filter) {
            const insights = document.querySelectorAll('[data-insight-type]');
            
            insights.forEach(insight => {
                const shouldShow = filter === 'all' || 
                                 (filter === 'high' && insight.dataset.priority === 'high') ||
                                 (filter === 'relationship' && insight.dataset.insightType.includes('relationship')) ||
                                 (filter === 'topics' && insight.dataset.insightType.includes('topic'));
                
                insight.style.display = shouldShow ? 'block' : 'none';
            });
        }

        function updateFilterButtons(activeBtn) {
            document.querySelectorAll('.insight-filter').forEach(btn => {
                btn.classList.remove('active', 'bg-[#0b80ee]', 'text-white');
                btn.classList.add('bg-[#223649]', 'text-[#90aecb]');
            });
            
            activeBtn.classList.add('active', 'bg-[#0b80ee]', 'text-white');
            activeBtn.classList.remove('bg-[#223649]', 'text-[#90aecb]');
        }

        async function markInsightFeedback(insightId, feedback) {
            try {
                const response = await fetch(`/api/insights/${insightId}/feedback`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ feedback: feedback })
                });
                
                if (response.ok) {
                    showSuccess(`Feedback submitted: ${feedback}`);
                    // Remove or update the insight card
                    const insightCard = document.querySelector(`[data-insight-id="${insightId}"]`);
                    if (insightCard) {
                        insightCard.style.opacity = '0.5';
                        insightCard.querySelector('.flex.gap-2').innerHTML = 
                            `<span class="text-xs text-green-400">‚úì ${feedback.replace('_', ' ')}</span>`;
                    }
                } else {
                    showError('Failed to submit feedback');
                }
                
            } catch (error) {
                console.error('Failed to submit feedback:', error);
                showError('Failed to submit feedback');
            }
        }

        function showProcessingStatus(show) {
            const statusBar = document.getElementById('processingStatus');
            if (show) {
                statusBar.classList.remove('hidden');
                // Simulate progress
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                    }
                    document.getElementById('processingProgress').textContent = Math.round(progress) + '%';
                }, 500);
            } else {
                statusBar.classList.add('hidden');
            }
        }

        function showIntelligenceSuccess(data) {
            const stages = data.processing_stages || {};
            const intelligence = data.entity_intelligence || {};
            const insights = data.insights_generated || [];
            
            let message = `ü§ñ Intelligence Sync Complete!\n\n`;
            message += `üìß Processed ${stages.emails_fetched || 0} emails\n`;
            message += `üìÖ Enhanced ${stages.calendar_events_fetched || 0} calendar events\n`;
            message += `üß† Generated ${insights.length} strategic insights\n`;
            message += `üï∏Ô∏è Updated ${intelligence.entity_summary?.total_entities || 0} entity connections\n\n`;
            
            if (data.next_steps && data.next_steps.length > 0) {
                message += `Next Steps:\n${data.next_steps.join('\n')}`;
            }
            
            showSuccess(message);
        }

        function updateLastUpdateTime() {
            const now = new Date();
            document.getElementById('lastUpdateTime').textContent = 
                now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Utility functions
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function getPriorityColor(priority) {
            const colors = {
                'high': 'bg-red-600 text-white',
                'medium': 'bg-yellow-600 text-white',
                'low': 'bg-green-600 text-white'
            };
            return colors[priority] || colors['medium'];
        }

        function getInitials(name) {
            if (!name) return '?';
            const words = name.split(' ').filter(word => word.length > 0);
            if (words.length === 0) return '?';
            if (words.length === 1) return words[0].charAt(0).toUpperCase();
            return (words[0].charAt(0) + words[words.length - 1].charAt(0)).toUpperCase();
        }

        function formatTimeAgo(dateString) {
            if (!dateString) return 'Unknown time';
            
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.round(diffMs / 60000);
            const diffHours = Math.round(diffMs / 3600000);
            const diffDays = Math.round(diffMs / 86400000);
            
            if (diffMins < 1) return 'Just now';
            if (diffMins < 60) return `${diffMins}m ago`;
            if (diffHours < 24) return `${diffHours}h ago`;
            if (diffDays < 7) return `${diffDays}d ago`;
            return date.toLocaleDateString();
        }

        function showSuccess(message) {
            const toast = document.createElement('div');
            toast.className = 'fixed top-4 right-4 bg-green-600 text-white px-6 py-4 rounded-lg z-50 max-w-md shadow-lg';
            toast.style.whiteSpace = 'pre-line';
            toast.style.fontSize = '14px';
            toast.style.lineHeight = '1.4';
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
            }, message.includes('ü§ñ') ? 8000 : 4000);
        }

        function showError(message) {
            const toast = document.createElement('div');
            toast.className = 'fixed top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-lg z-50';
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
            }, 5000);
        }
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chief of Staff - Intelligence Dashboard</title>
    
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" as="style" onload="this.rel='stylesheet'" 
          href="https://fonts.googleapis.com/css2?display=swap&family=Inter%3Awght%40400%3B500%3B700%3B900&family=Noto+Sans%3Awght%40400%3B500%3B700%3B900" />
    
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    
    <style>
        .intelligence-card { 
            transition: all 0.3s ease; 
            border-left: 4px solid transparent;
        }
        .intelligence-card:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 8px 25px rgba(11, 128, 238, 0.15);
            border-left-color: #0b80ee;
        }
        .insight-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        .entity-connection { 
            background: linear-gradient(135deg, rgba(11, 128, 238, 0.1), rgba(144, 174, 203, 0.1));
            border: 1px solid rgba(11, 128, 238, 0.2);
        }
        .real-time-indicator {
            position: relative;
            overflow: hidden;
        }
        .real-time-indicator::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(11, 128, 238, 0.4), transparent);
            animation: shimmer 2s infinite;
        }
        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        .strategic-importance-high { border-left-color: #ef4444; }
        .strategic-importance-medium { border-left-color: #f59e0b; }
        .strategic-importance-low { border-left-color: #10b981; }
    </style>
</head>
<body class="bg-[#101a23] text-white min-h-screen">
    <div class="relative flex size-full min-h-screen flex-col bg-[#101a23] dark group/design-root overflow-x-hidden" 
         style='font-family: Inter, "Noto Sans", sans-serif;'>
        
        <!-- Real-Time Processing Status Bar -->
        <div id="processingStatus" class="bg-gradient-to-r from-blue-600 to-purple-600 text-white text-center py-2 text-sm hidden">
            <span class="real-time-indicator px-4 py-1 rounded-full bg-black bg-opacity-20">
                üß† AI Intelligence Processing... <span id="processingProgress">0%</span>
            </span>
        </div>
        
        <div class="layout-container flex h-full grow flex-col">
            <div class="gap-1 px-6 flex flex-1 justify-center py-5">
                
                <!-- Left Sidebar -->
                <div class="layout-content-container flex flex-col w-80">
                    <div class="flex h-full min-h-[700px] flex-col justify-between bg-[#101a23] p-4">
                        <div class="flex flex-col gap-4">
                            <!-- Enhanced Logo/Header -->
                            <div class="flex gap-3 items-center">
                                <div class="bg-gradient-to-br from-blue-500 to-purple-600 rounded-full size-12 flex items-center justify-center text-white font-bold text-lg relative">
                                    üß†
                                    <div id="aiThinkingIndicator" class="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full hidden insight-pulse"></div>
                                </div>
                                <div>
                                    <h1 class="text-white text-base font-medium leading-normal">AI Chief of Staff</h1>
                                    <p class="text-[#90aecb] text-xs">Intelligence Platform</p>
                                </div>
                            </div>
                            
                            <!-- Intelligence Summary Cards -->
                            <div class="space-y-2">
                                <div class="bg-[#223649] rounded-lg p-3 intelligence-card">
                                    <div class="flex items-center justify-between">
                                        <span class="text-[#90aecb] text-xs">Active Intelligence</span>
                                        <span id="intelligenceScore" class="text-white font-bold text-lg">--</span>
                                    </div>
                                    <div class="mt-1">
                                        <div class="bg-[#101a23] rounded-full h-2">
                                            <div id="intelligenceProgress" class="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="bg-[#223649] rounded-lg p-3 intelligence-card">
                                    <div class="flex items-center justify-between">
                                        <span class="text-[#90aecb] text-xs">Entity Network</span>
                                        <span id="entityCount" class="text-white font-bold text-lg">--</span>
                                    </div>
                                    <div class="flex gap-2 mt-2 text-xs">
                                        <span class="bg-blue-600 px-2 py-1 rounded text-white" id="topicsCount">0 Topics</span>
                                        <span class="bg-green-600 px-2 py-1 rounded text-white" id="peopleCount">0 People</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Navigation Menu -->
                            <div class="flex flex-col gap-2">
                                <div class="flex items-center gap-3 px-3 py-2 rounded-full bg-[#223649]">
                                    <div class="text-white">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
                                            <path d="M224,115.55V208a16,16,0,0,1-16,16H168a16,16,0,0,1-16-16V168a8,8,0,0,0-8-8H112a8,8,0,0,0-8,8v40a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V115.55a16,16,0,0,1,5.17-11.78l80-75.48.11-.11a16,16,0,0,1,21.53,0,1.14,1.14,0,0,0,.11.11l80,75.48A16,16,0,0,1,224,115.55Z"></path>
                                        </svg>
                                    </div>
                                    <p class="text-white text-sm font-medium leading-normal">Intelligence Hub</p>
                                </div>
                                
                                <a href="/topics" class="nav-link flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-[#223649] rounded-full transition-colors">
                                    <div class="text-white">üß†</div>
                                    <p class="text-white text-sm font-medium leading-normal">Topics Brain</p>
                                </a>
                                
                                <a href="/people" class="nav-link flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-[#223649] rounded-full transition-colors">
                                    <div class="text-white">üë•</div>
                                    <p class="text-white text-sm font-medium leading-normal">Relationship Intel</p>
                                </a>
                                
                                <a href="/tasks" class="nav-link flex items-center gap