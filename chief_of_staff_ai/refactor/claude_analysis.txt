# File: chief_of_staff_ai/intelligence/claude_analysts.py
"""
Specialized Claude Opus 4 Analysts for Knowledge Tree Construction
================================================================
Multiple specialized AI analysts that process emails in parallel
"""

import asyncio
import anthropic
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import json
import logging
from chief_of_staff_ai.config.settings import settings

logger = logging.getLogger(__name__)

@dataclass
class AnalysisResult:
    """Result from a specialized Claude analyst"""
    analyst_type: str
    insights: Dict
    confidence: float
    evidence: List[Dict]
    relationships: List[Dict]
    topics: List[str]
    entities: List[Dict]

class BaseClaudeAnalyst:
    """Base class for specialized Claude analysts"""
    
    def __init__(self, analyst_type: str, model: str = None):
        self.analyst_type = analyst_type
        self.model = model or settings.CLAUDE_MODEL
        self.client = anthropic.Anthropic(api_key=settings.ANTHROPIC_API_KEY)
        
    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Analyze a batch of emails with specialized focus"""
        raise NotImplementedError("Subclasses must implement analyze_emails")
    
    def _prepare_email_context(self, emails: List[Dict]) -> str:
        """Prepare email context for Claude"""
        context_parts = []
        for email in emails[:50]:  # Limit to prevent token overflow
            context_parts.append(f"""
Email ID: {email.get('id')}
Date: {email.get('email_date')}
From: {email.get('sender')} 
To: {email.get('recipients')}
Subject: {email.get('subject')}
Body: {email.get('body_text', '')[:1000]}...
---
""")
        return "\n".join(context_parts)

class BusinessStrategyAnalyst(BaseClaudeAnalyst):
    """Analyzes emails for strategic business decisions and rationale"""
    
    def __init__(self):
        super().__init__("business_strategy")
        self.analysis_prompt = """You are a senior business strategy analyst. Analyze these emails to extract:

1. Strategic decisions made or discussed
2. Business rationale behind decisions  
3. Market positioning discussions
4. Competitive intelligence
5. Growth strategies
6. Risk assessments
7. Resource allocation decisions

For each insight, provide:
- The specific decision or strategy
- Supporting evidence (quote relevant parts)
- Confidence level (0-1)
- Related people and their roles
- Business impact assessment

Format your response as JSON with structure:
{
  "strategic_decisions": [...],
  "market_insights": [...],
  "competitive_intelligence": [...],
  "risks_identified": [...],
  "opportunities": [...],
  "key_relationships": [...]
}"""

    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Extract strategic business intelligence"""
        try:
            email_context = self._prepare_email_context(emails)
            
            response = await asyncio.to_thread(
                self.client.messages.create,
                model=self.model,
                max_tokens=4000,
                temperature=0.3,
                messages=[{
                    "role": "user",
                    "content": f"{self.analysis_prompt}\n\nEmails to analyze:\n{email_context}"
                }]
            )
            
            # Parse Claude's response
            result = self._parse_analysis_response(response.content[0].text)
            
            return AnalysisResult(
                analyst_type=self.analyst_type,
                insights=result,
                confidence=0.85,
                evidence=self._extract_evidence(result, emails),
                relationships=result.get('key_relationships', []),
                topics=self._extract_topics(result),
                entities=self._extract_entities(result)
            )
            
        except Exception as e:
            logger.error(f"Business strategy analysis error: {str(e)}")
            return AnalysisResult(
                analyst_type=self.analyst_type,
                insights={},
                confidence=0.0,
                evidence=[],
                relationships=[],
                topics=[],
                entities=[]
            )
    
    def _parse_analysis_response(self, response_text: str) -> Dict:
        """Parse Claude's JSON response"""
        try:
            # Extract JSON from response
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            return {}
        except:
            return {}
    
    def _extract_evidence(self, insights: Dict, emails: List[Dict]) -> List[Dict]:
        """Extract supporting evidence from emails"""
        evidence = []
        # Implementation to match insights with email content
        return evidence
    
    def _extract_topics(self, insights: Dict) -> List[str]:
        """Extract key topics from insights"""
        topics = set()
        for category in insights.values():
            if isinstance(category, list):
                for item in category:
                    if isinstance(item, dict) and 'topics' in item:
                        topics.update(item['topics'])
        return list(topics)
    
    def _extract_entities(self, insights: Dict) -> List[Dict]:
        """Extract entities (people, companies, projects) from insights"""
        entities = []
        # Implementation to extract entities
        return entities

class RelationshipDynamicsAnalyst(BaseClaudeAnalyst):
    """Maps relationship dynamics and influence patterns"""
    
    def __init__(self):
        super().__init__("relationship_dynamics")
        self.analysis_prompt = """You are an expert in organizational psychology and relationship mapping. Analyze these emails to understand:

1. Communication patterns between people
2. Influence and decision-making dynamics
3. Team collaboration patterns
4. Relationship strengths and tensions
5. Key connectors and influencers
6. Communication styles and preferences

For each relationship insight:
- Identify the people involved
- Describe the relationship dynamic
- Assess influence levels
- Note communication patterns
- Identify collaboration opportunities

Provide response as JSON with structure:
{
  "key_relationships": [...],
  "influence_network": {...},
  "communication_patterns": [...],
  "collaboration_insights": [...],
  "relationship_risks": [...],
  "networking_opportunities": [...]
}"""

    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Map relationship dynamics and influence patterns"""
        # Similar implementation to BusinessStrategyAnalyst
        # but focused on relationship extraction
        pass

class TechnicalEvolutionAnalyst(BaseClaudeAnalyst):
    """Tracks technical decisions and architecture evolution"""
    
    def __init__(self):
        super().__init__("technical_evolution")
        self.analysis_prompt = """You are a senior technical architect. Analyze these emails to extract:

1. Technical decisions and their rationale
2. Architecture choices and evolution
3. Technology stack discussions
4. Technical debt and risks
5. Innovation opportunities
6. Development methodology insights

Focus on understanding the WHY behind technical choices.

Format response as JSON:
{
  "technical_decisions": [...],
  "architecture_insights": [...],
  "tech_stack_evolution": [...],
  "technical_risks": [...],
  "innovation_opportunities": [...],
  "methodology_patterns": [...]
}"""

    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Extract technical decisions and evolution patterns"""
        # Implementation similar to above
        pass

class MarketIntelligenceAnalyst(BaseClaudeAnalyst):
    """Identifies market signals and competitive intelligence"""
    
    def __init__(self):
        super().__init__("market_intelligence")
        self.analysis_prompt = """You are a market intelligence analyst. Extract from these emails:

1. Market trends and signals
2. Competitive movements and intelligence
3. Customer feedback and needs
4. Partnership opportunities
5. Industry developments
6. Timing factors and market windows

Focus on actionable intelligence and timing.

Format as JSON:
{
  "market_trends": [...],
  "competitive_intelligence": [...],
  "customer_insights": [...],
  "partnership_opportunities": [...],
  "timing_factors": [...],
  "market_risks": [...]
}"""

    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Extract market intelligence and opportunities"""
        # Implementation
        pass

class PredictiveAnalyst(BaseClaudeAnalyst):
    """Analyzes patterns to predict future outcomes and opportunities"""
    
    def __init__(self):
        super().__init__("predictive_analysis")
        self.analysis_prompt = """You are a predictive analytics expert. Based on these emails, identify:

1. Emerging patterns and trends
2. Likely future scenarios
3. Relationship trajectory predictions
4. Upcoming decision points
5. Risk indicators
6. Opportunity windows

Focus on actionable predictions with supporting evidence.

Format as JSON:
{
  "predictions": [...],
  "emerging_patterns": [...],
  "decision_points": [...],
  "risk_indicators": [...],
  "opportunity_windows": [...],
  "recommended_actions": [...]
}"""

    async def analyze_emails(self, emails: List[Dict], context: Dict = None) -> AnalysisResult:
        """Generate predictions based on patterns"""
        # Implementation
        pass

class KnowledgeTreeBuilder:
    """Orchestrates multiple Claude analysts to build comprehensive knowledge tree"""
    
    def __init__(self):
        self.analysts = {
            'business_strategy': BusinessStrategyAnalyst(),
            'relationship_dynamics': RelationshipDynamicsAnalyst(),
            'technical_evolution': TechnicalEvolutionAnalyst(),
            'market_intelligence': MarketIntelligenceAnalyst(),
            'predictive': PredictiveAnalyst()
        }
        
    async def build_knowledge_tree(self, user_id: int, time_window_days: int = 30) -> Dict:
        """Build comprehensive knowledge tree from emails"""
        from models.database import get_db_manager
        
        try:
            db_manager = get_db_manager()
            
            # Get emails for time window
            emails = self._get_emails_for_window(user_id, time_window_days)
            
            if not emails:
                logger.warning(f"No emails found for user {user_id} in {time_window_days} day window")
                return {'status': 'no_data'}
            
            logger.info(f"Building knowledge tree from {len(emails)} emails")
            
            # Run all analysts in parallel
            analysis_tasks = []
            for analyst_name, analyst in self.analysts.items():
                task = analyst.analyze_emails(emails)
                analysis_tasks.append(task)
            
            # Wait for all analyses to complete
            results = await asyncio.gather(*analysis_tasks)
            
            # Merge results into knowledge tree
            knowledge_tree = self._merge_analysis_results(results)
            
            # Add temporal context
            knowledge_tree['time_window'] = {
                'days': time_window_days,
                'email_count': len(emails),
                'analysis_timestamp': datetime.utcnow().isoformat()
            }
            
            # Save to database
            self._save_knowledge_tree(user_id, knowledge_tree)
            
            return knowledge_tree
            
        except Exception as e:
            logger.error(f"Knowledge tree building error: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _get_emails_for_window(self, user_id: int, days: int) -> List[Dict]:
        """Get emails within time window"""
        from models.database import get_db_manager
        from datetime import datetime, timedelta
        
        db_manager = get_db_manager()
        cutoff_date = datetime.utcnow() - timedelta(days=days)
        
        # Get emails from trusted contacts only
        emails = db_manager.get_user_emails(user_id, limit=1000)
        
        # Filter by date and trusted contacts
        filtered_emails = []
        for email in emails:
            if email.email_date and email.email_date > cutoff_date:
                # Check if sender is trusted contact
                trusted_contact = db_manager.find_trusted_contact_by_email(
                    user_id, email.sender
                )
                if trusted_contact:
                    filtered_emails.append(email.to_dict())
        
        return filtered_emails
    
    def _merge_analysis_results(self, results: List[AnalysisResult]) -> Dict:
        """Merge results from all analysts into unified knowledge tree"""
        knowledge_tree = {
            'insights': {},
            'relationships': [],
            'topics': set(),
            'entities': [],
            'predictions': [],
            'evidence_map': {}
        }
        
        for result in results:
            # Merge insights by analyst type
            knowledge_tree['insights'][result.analyst_type] = result.insights
            
            # Aggregate relationships
            knowledge_tree['relationships'].extend(result.relationships)
            
            # Collect all topics
            knowledge_tree['topics'].update(result.topics)
            
            # Aggregate entities
            knowledge_tree['entities'].extend(result.entities)
            
            # Map evidence to insights
            for evidence in result.evidence:
                insight_id = evidence.get('insight_id')
                if insight_id:
                    knowledge_tree['evidence_map'][insight_id] = evidence
        
        # Convert set to list for JSON serialization
        knowledge_tree['topics'] = list(knowledge_tree['topics'])
        
        # Deduplicate and rank entities
        knowledge_tree['entities'] = self._deduplicate_entities(knowledge_tree['entities'])
        
        return knowledge_tree
    
    def _deduplicate_entities(self, entities: List[Dict]) -> List[Dict]:
        """Deduplicate and merge entity information"""
        entity_map = {}
        
        for entity in entities:
            key = (entity.get('type'), entity.get('name'))
            if key in entity_map:
                # Merge information
                existing = entity_map[key]
                existing['mentions'] = existing.get('mentions', 0) + 1
                existing['contexts'].extend(entity.get('contexts', []))
            else:
                entity['mentions'] = 1
                entity['contexts'] = entity.get('contexts', [])
                entity_map[key] = entity
        
        return list(entity_map.values())
    
    def _save_knowledge_tree(self, user_id: int, knowledge_tree: Dict):
        """Save knowledge tree to database"""
        # Implementation to save to database
        # Could use a dedicated KnowledgeTree model or store as JSON
        pass