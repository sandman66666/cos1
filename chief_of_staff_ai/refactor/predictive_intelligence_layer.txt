# File: chief_of_staff_ai/intelligence/predictive_engine.py
"""
Predictive Intelligence Engine
==============================
Analyzes patterns to predict outcomes and generate actionable recommendations
"""

import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.cluster import DBSCAN
import asyncio
import json

logger = logging.getLogger(__name__)

@dataclass
class Prediction:
    """Individual prediction with confidence and evidence"""
    prediction_type: str
    subject: str
    outcome: str
    probability: float
    confidence: float
    time_horizon: str
    evidence: List[Dict]
    recommended_actions: List[Dict]
    risk_factors: List[str]

@dataclass
class ActionableInsight:
    """Actionable insight with specific recommendations"""
    insight_type: str
    title: str
    description: str
    urgency: str  # immediate, short_term, long_term
    impact: str   # high, medium, low
    actions: List[Dict]
    expected_outcome: str
    effort_required: str
    dependencies: List[str]

class PredictiveIntelligenceEngine:
    """Main engine for predictive analytics and recommendations"""
    
    def __init__(self, storage_manager, claude_client):
        self.storage = storage_manager
        self.claude = claude_client
        self.models = {}
        self._initialize_models()
    
    def _initialize_models(self):
        """Initialize ML models for predictions"""
        # Relationship trajectory model
        self.models['relationship_trajectory'] = RandomForestRegressor(
            n_estimators=100,
            random_state=42
        )
        
        # Opportunity timing model
        self.models['opportunity_timing'] = RandomForestRegressor(
            n_estimators=50,
            random_state=42
        )
        
        # Risk detection model
        self.models['risk_detection'] = DBSCAN(
            eps=0.3,
            min_samples=2
        )
    
    async def generate_predictions(self, user_id: int, knowledge_tree: Dict) -> List[Prediction]:
        """Generate comprehensive predictions based on patterns"""
        predictions = []
        
        # Run different prediction types in parallel
        prediction_tasks = [
            self._predict_relationship_trajectories(user_id, knowledge_tree),
            self._predict_project_outcomes(user_id, knowledge_tree),
            self._predict_opportunity_windows(user_id, knowledge_tree),
            self._predict_risk_scenarios(user_id, knowledge_tree),
            self._predict_optimal_timing(user_id, knowledge_tree)
        ]
        
        results = await asyncio.gather(*prediction_tasks, return_exceptions=True)
        
        for result in results:
            if isinstance(result, list):
                predictions.extend(result)
            else:
                logger.error(f"Prediction error: {result}")
        
        # Rank predictions by confidence and probability
        predictions.sort(
            key=lambda p: (p.confidence * p.probability),
            reverse=True
        )
        
        return predictions[:20]  # Top 20 predictions
    
    async def _predict_relationship_trajectories(self, user_id: int, 
                                               knowledge_tree: Dict) -> List[Prediction]:
        """Predict how relationships will evolve"""
        predictions = []
        
        # Get relationship data
        relationships = knowledge_tree.get('augmented_relationships', [])
        
        for rel in relationships[:10]:  # Top 10 relationships
            # Extract features for prediction
            features = self._extract_relationship_features(rel)
            
            if features:
                # Predict trajectory
                trajectory = self._predict_single_trajectory(features)
                
                # Use Claude for nuanced interpretation
                interpretation = await self._interpret_trajectory(rel, trajectory)
                
                predictions.append(Prediction(
                    prediction_type='relationship_trajectory',
                    subject=self._get_relationship_subject(rel),
                    outcome=interpretation['outcome'],
                    probability=trajectory['probability'],
                    confidence=trajectory['confidence'],
                    time_horizon=interpretation['time_horizon'],
                    evidence=self._gather_trajectory_evidence(rel),
                    recommended_actions=interpretation['actions'],
                    risk_factors=interpretation['risks']
                ))
        
        return predictions
    
    async def _predict_project_outcomes(self, user_id: int, 
                                      knowledge_tree: Dict) -> List[Prediction]:
        """Predict project success and timeline"""
        predictions = []
        
        # Extract project insights from knowledge tree
        project_insights = self._extract_project_insights(knowledge_tree)
        
        for project in project_insights:
            # Analyze project health indicators
            health_score = self._calculate_project_health(project)
            
            # Predict outcome
            outcome_prediction = await self._predict_project_success(project, health_score)
            
            predictions.append(Prediction(
                prediction_type='project_outcome',
                subject=project.get('name', 'Unknown Project'),
                outcome=outcome_prediction['outcome'],
                probability=outcome_prediction['probability'],
                confidence=health_score,
                time_horizon=outcome_prediction['timeline'],
                evidence=project.get('evidence', []),
                recommended_actions=outcome_prediction['actions'],
                risk_factors=outcome_prediction['risks']
            ))
        
        return predictions
    
    async def _predict_opportunity_windows(self, user_id: int, 
                                         knowledge_tree: Dict) -> List[Prediction]:
        """Predict optimal timing for opportunities"""
        predictions = []
        
        # Extract opportunities from insights
        opportunities = self._extract_opportunities(knowledge_tree)
        
        for opp in opportunities:
            # Analyze timing factors
            timing_analysis = await self._analyze_opportunity_timing(opp, knowledge_tree)
            
            if timing_analysis['confidence'] > 0.6:
                predictions.append(Prediction(
                    prediction_type='opportunity_window',
                    subject=opp['description'],
                    outcome=f"Optimal window: {timing_analysis['window']}",
                    probability=timing_analysis['success_probability'],
                    confidence=timing_analysis['confidence'],
                    time_horizon=timing_analysis['window'],
                    evidence=timing_analysis['supporting_evidence'],
                    recommended_actions=timing_analysis['preparation_steps'],
                    risk_factors=timing_analysis['risks']
                ))
        
        return predictions
    
    async def _predict_risk_scenarios(self, user_id: int, 
                                    knowledge_tree: Dict) -> List[Prediction]:
        """Predict potential risks and mitigation strategies"""
        predictions = []
        
        # Extract risk indicators
        risk_indicators = self._extract_risk_indicators(knowledge_tree)
        
        # Cluster similar risks
        if len(risk_indicators) > 2:
            risk_clusters = self._cluster_risks(risk_indicators)
        else:
            risk_clusters = [risk_indicators]
        
        for cluster in risk_clusters:
            # Analyze risk cluster
            risk_analysis = await self._analyze_risk_cluster(cluster)
            
            if risk_analysis['severity'] > 0.5:
                predictions.append(Prediction(
                    prediction_type='risk_scenario',
                    subject=risk_analysis['risk_category'],
                    outcome=risk_analysis['potential_impact'],
                    probability=risk_analysis['likelihood'],
                    confidence=risk_analysis['confidence'],
                    time_horizon=risk_analysis['time_frame'],
                    evidence=risk_analysis['indicators'],
                    recommended_actions=risk_analysis['mitigation_steps'],
                    risk_factors=risk_analysis['escalation_factors']
                ))
        
        return predictions
    
    async def _predict_optimal_timing(self, user_id: int, 
                                    knowledge_tree: Dict) -> List[Prediction]:
        """Predict optimal timing for various actions"""
        predictions = []
        
        # Get pending decisions and actions
        pending_items = self._extract_pending_items(knowledge_tree)
        
        for item in pending_items:
            # Analyze timing factors
            timing_prediction = await self._predict_action_timing(item, knowledge_tree)
            
            predictions.append(Prediction(
                prediction_type='optimal_timing',
                subject=item['description'],
                outcome=f"Best time: {timing_prediction['optimal_time']}",
                probability=timing_prediction['success_rate'],
                confidence=timing_prediction['confidence'],
                time_horizon=timing_prediction['optimal_time'],
                evidence=timing_prediction['timing_factors'],
                recommended_actions=timing_prediction['preparation'],
                risk_factors=timing_prediction['delay_risks']
            ))
        
        return predictions
    
    async def generate_actionable_insights(self, predictions: List[Prediction], 
                                         user_context: Dict) -> List[ActionableInsight]:
        """Convert predictions into actionable insights"""
        insights = []
        
        # Group predictions by urgency
        urgent_predictions = [p for p in predictions if self._is_urgent(p)]
        important_predictions = [p for p in predictions if self._is_important(p)]
        
        # Generate immediate actions
        for pred in urgent_predictions[:5]:
            insight = await self._create_actionable_insight(pred, 'immediate')
            insights.append(insight)
        
        # Generate strategic actions
        for pred in important_predictions[:5]:
            insight = await self._create_actionable_insight(pred, 'strategic')
            insights.append(insight)
        
        # Generate opportunity actions
        opportunity_predictions = [p for p in predictions 
                                 if p.prediction_type == 'opportunity_window']
        for pred in opportunity_predictions[:3]:
            insight = await self._create_actionable_insight(pred, 'opportunity')
            insights.append(insight)
        
        return insights
    
    async def _create_actionable_insight(self, prediction: Prediction, 
                                       insight_category: str) -> ActionableInsight:
        """Create a specific actionable insight from a prediction"""
        # Use Claude to generate actionable steps
        prompt = f"""Based on this prediction, create specific actionable steps:

Prediction: {prediction.outcome}
Subject: {prediction.subject}
Probability: {prediction.probability:.1%}
Evidence: {json.dumps(prediction.evidence[:3])}
Category: {insight_category}

Generate:
1. A clear, actionable title
2. Specific steps to take (3-5)
3. Expected outcome
4. Effort required (hours/days)
5. Any dependencies

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.4,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            insight_data = json.loads(response.content[0].text)
            
            return ActionableInsight(
                insight_type=prediction.prediction_type,
                title=insight_data.get('title', f"Action: {prediction.subject}"),
                description=prediction.outcome,
                urgency=self._determine_urgency(prediction, insight_category),
                impact=self._determine_impact(prediction),
                actions=insight_data.get('steps', []),
                expected_outcome=insight_data.get('expected_outcome', ''),
                effort_required=insight_data.get('effort_required', 'Unknown'),
                dependencies=insight_data.get('dependencies', [])
            )
        except:
            # Fallback insight
            return ActionableInsight(
                insight_type=prediction.prediction_type,
                title=f"Action needed: {prediction.subject}",
                description=prediction.outcome,
                urgency='medium',
                impact='medium',
                actions=prediction.recommended_actions,
                expected_outcome="Improved outcomes",
                effort_required="Moderate",
                dependencies=[]
            )
    
    def _extract_relationship_features(self, relationship: Dict) -> Optional[np.ndarray]:
        """Extract features for relationship trajectory prediction"""
        try:
            augmented_data = relationship.get('augmented_data', {})
            
            features = [
                augmented_data.get('communication_count', 0),
                len(augmented_data.get('patterns', [])),
                augmented_data.get('health_score', 0.5),
                self._calculate_momentum(augmented_data.get('evolution', [])),
                self._calculate_engagement_trend(augmented_data.get('patterns', []))
            ]
            
            return np.array(features).reshape(1, -1)
        except:
            return None
    
    def _predict_single_trajectory(self, features: np.ndarray) -> Dict:
        """Predict trajectory for a single relationship"""
        # This would use the trained model in production
        # For now, simulate based on features
        
        health_score = features[0][2]
        momentum = features[0][3]
        
        if health_score > 0.7 and momentum > 0:
            return {
                'direction': 'strengthening',
                'probability': 0.8,
                'confidence': 0.75
            }
        elif health_score < 0.3 or momentum < -0.2:
            return {
                'direction': 'weakening',
                'probability': 0.7,
                'confidence': 0.65
            }
        else:
            return {
                'direction': 'stable',
                'probability': 0.6,
                'confidence': 0.5
            }
    
    async def _interpret_trajectory(self, relationship: Dict, trajectory: Dict) -> Dict:
        """Use Claude to interpret trajectory prediction"""
        prompt = f"""Interpret this relationship trajectory prediction:

Relationship: {self._get_relationship_subject(relationship)}
Predicted Direction: {trajectory['direction']}
Probability: {trajectory['probability']:.1%}

Recent patterns: {relationship.get('augmented_data', {}).get('patterns', [])}

Provide:
1. Natural language outcome description
2. Time horizon (when this will manifest)
3. 3-5 specific recommended actions
4. Risk factors to watch for

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            return json.loads(response.content[0].text)
        except:
            return {
                'outcome': f"Relationship is {trajectory['direction']}",
                'time_horizon': 'next 30 days',
                'actions': ['Schedule regular check-ins'],
                'risks': ['Communication gaps']
            }
    
    def _get_relationship_subject(self, relationship: Dict) -> str:
        """Extract subject name from relationship data"""
        original = relationship.get('original', {})
        if isinstance(original, dict):
            return original.get('name', 'Unknown Contact')
        return 'Unknown Contact'
    
    def _gather_trajectory_evidence(self, relationship: Dict) -> List[Dict]:
        """Gather evidence supporting trajectory prediction"""
        evidence = []
        augmented = relationship.get('augmented_data', {})
        
        # Communication patterns
        if augmented.get('patterns'):
            evidence.append({
                'type': 'communication_patterns',
                'data': augmented['patterns'][:3]
            })
        
        # Evolution data
        if augmented.get('evolution'):
            evidence.append({
                'type': 'relationship_evolution',
                'data': augmented['evolution'][-3:]
            })
        
        return evidence
    
    def _calculate_momentum(self, evolution: List[Dict]) -> float:
        """Calculate relationship momentum from evolution data"""
        if not evolution or len(evolution) < 2:
            return 0.0
        
        # Simple momentum: change in engagement over time
        recent = evolution[-1].get('evidence_count', 0)
        previous = evolution[-2].get('evidence_count', 0)
        
        return (recent - previous) / max(previous, 1)
    
    def _calculate_engagement_trend(self, patterns: List[Dict]) -> float:
        """Calculate engagement trend from patterns"""
        if not patterns:
            return 0.0
        
        # Count positive vs negative patterns
        positive = sum(1 for p in patterns if 'positive' in str(p).lower())
        negative = sum(1 for p in patterns if 'negative' in str(p).lower())
        
        total = positive + negative
        return (positive - negative) / max(total, 1)
    
    def _extract_project_insights(self, knowledge_tree: Dict) -> List[Dict]:
        """Extract project-related insights from knowledge tree"""
        projects = []
        
        # Look for project insights in different categories
        insights = knowledge_tree.get('insights', {})
        for analyst_type, categories in insights.items():
            if isinstance(categories, dict):
                for category, items in categories.items():
                    if 'project' in category.lower() and isinstance(items, list):
                        projects.extend(items)
        
        return projects
    
    def _calculate_project_health(self, project: Dict) -> float:
        """Calculate project health score"""
        health_indicators = {
            'has_timeline': 0.2,
            'has_milestones': 0.2,
            'has_team': 0.2,
            'recent_progress': 0.2,
            'no_blockers': 0.2
        }
        
        score = 0.0
        project_str = json.dumps(project).lower()
        
        if 'timeline' in project_str or 'deadline' in project_str:
            score += health_indicators['has_timeline']
        if 'milestone' in project_str:
            score += health_indicators['has_milestones']
        if 'team' in project_str or 'assigned' in project_str:
            score += health_indicators['has_team']
        if 'progress' in project_str or 'completed' in project_str:
            score += health_indicators['recent_progress']
        if 'blocker' not in project_str and 'blocked' not in project_str:
            score += health_indicators['no_blockers']
        
        return score
    
    async def _predict_project_success(self, project: Dict, health_score: float) -> Dict:
        """Predict project success probability"""
        # Use Claude for nuanced project analysis
        prompt = f"""Analyze this project and predict its success:

Project: {json.dumps(project)}
Health Score: {health_score:.1%}

Provide:
1. Success probability (0-1)
2. Expected timeline/outcome
3. Key success factors
4. Main risks
5. Recommended actions (3-5)

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            result = json.loads(response.content[0].text)
            return {
                'outcome': result.get('outcome', 'Likely successful'),
                'probability': result.get('success_probability', health_score),
                'timeline': result.get('timeline', 'Next quarter'),
                'actions': result.get('recommended_actions', []),
                'risks': result.get('risks', [])
            }
        except:
            return {
                'outcome': 'Moderate success likely',
                'probability': health_score,
                'timeline': 'Next quarter',
                'actions': ['Review project milestones'],
                'risks': ['Resource constraints']
            }
    
    def _extract_opportunities(self, knowledge_tree: Dict) -> List[Dict]:
        """Extract opportunities from knowledge tree"""
        opportunities = []
        
        # Look in market intelligence and predictions
        insights = knowledge_tree.get('insights', {})
        
        if 'market_intelligence' in insights:
            market_opps = insights['market_intelligence'].get('opportunities', [])
            opportunities.extend(market_opps)
        
        if 'predictive' in insights:
            predicted_opps = insights['predictive'].get('opportunity_windows', [])
            opportunities.extend(predicted_opps)
        
        return opportunities
    
    async def _analyze_opportunity_timing(self, opportunity: Dict, 
                                        knowledge_tree: Dict) -> Dict:
        """Analyze optimal timing for an opportunity"""
        # Extract timing factors
        timing_factors = []
        
        # Market conditions
        market_insights = knowledge_tree.get('insights', {}).get('market_intelligence', {})
        if market_insights.get('timing_factors'):
            timing_factors.extend(market_insights['timing_factors'])
        
        # Relationship readiness
        relationships = knowledge_tree.get('augmented_relationships', [])
        relevant_relationships = self._find_relevant_relationships(opportunity, relationships)
        
        # Use Claude for timing analysis
        prompt = f"""Analyze the optimal timing for this opportunity:

Opportunity: {json.dumps(opportunity)}
Market Factors: {json.dumps(timing_factors[:3])}
Relationship Readiness: {len(relevant_relationships)} key relationships

Determine:
1. Optimal time window (specific timeframe)
2. Success probability if timed well
3. Confidence in timing prediction
4. Supporting evidence
5. Preparation steps needed
6. Risks of poor timing

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            return json.loads(response.content[0].text)
        except:
            return {
                'window': 'Next 30-60 days',
                'success_probability': 0.6,
                'confidence': 0.5,
                'supporting_evidence': timing_factors[:3],
                'preparation_steps': ['Prepare proposal'],
                'risks': ['Market timing uncertainty']
            }
    
    def _find_relevant_relationships(self, opportunity: Dict, 
                                   relationships: List[Dict]) -> List[Dict]:
        """Find relationships relevant to an opportunity"""
        relevant = []
        opp_str = json.dumps(opportunity).lower()
        
        for rel in relationships:
            rel_str = json.dumps(rel).lower()
            # Simple keyword matching - enhance with NLP
            if any(keyword in rel_str for keyword in opp_str.split()[:5]):
                relevant.append(rel)
        
        return relevant[:5]
    
    def _extract_risk_indicators(self, knowledge_tree: Dict) -> List[Dict]:
        """Extract risk indicators from knowledge tree"""
        risks = []
        
        # From various insight categories
        insights = knowledge_tree.get('insights', {})
        
        for analyst_type, categories in insights.items():
            if isinstance(categories, dict):
                # Look for risk-related categories
                if 'risks' in categories:
                    risks.extend(categories['risks'])
                if 'risk_indicators' in categories:
                    risks.extend(categories['risk_indicators'])
        
        # From relationship analysis
        for rel in knowledge_tree.get('augmented_relationships', []):
            if rel.get('augmented_data', {}).get('health_score', 1) < 0.3:
                risks.append({
                    'type': 'relationship_risk',
                    'subject': self._get_relationship_subject(rel),
                    'indicator': 'declining health score'
                })
        
        return risks
    
    def _cluster_risks(self, risk_indicators: List[Dict]) -> List[List[Dict]]:
        """Cluster similar risks together"""
        # Simple clustering based on risk type
        clusters = defaultdict(list)
        
        for risk in risk_indicators:
            risk_type = risk.get('type', 'unknown')
            clusters[risk_type].append(risk)
        
        return list(clusters.values())
    
    async def _analyze_risk_cluster(self, cluster: List[Dict]) -> Dict:
        """Analyze a cluster of related risks"""
        if not cluster:
            return {'severity': 0, 'confidence': 0}
        
        # Use Claude for risk analysis
        prompt = f"""Analyze this cluster of related risks:

Risks: {json.dumps(cluster)}

Determine:
1. Risk category/type
2. Potential impact (description)
3. Likelihood (0-1)
4. Severity (0-1)
5. Time frame when risk might materialize
6. Key indicators to watch
7. Mitigation steps (3-5)
8. Escalation factors

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            result = json.loads(response.content[0].text)
            return {
                'risk_category': result.get('risk_category', 'General Risk'),
                'potential_impact': result.get('potential_impact', 'Moderate impact'),
                'likelihood': result.get('likelihood', 0.5),
                'severity': result.get('severity', 0.5),
                'confidence': 0.7,  # Default confidence
                'time_frame': result.get('time_frame', 'Next quarter'),
                'indicators': cluster,
                'mitigation_steps': result.get('mitigation_steps', []),
                'escalation_factors': result.get('escalation_factors', [])
            }
        except:
            return {
                'risk_category': 'General Risk',
                'potential_impact': 'Potential negative impact',
                'likelihood': 0.5,
                'severity': 0.5,
                'confidence': 0.5,
                'time_frame': 'Near future',
                'indicators': cluster,
                'mitigation_steps': ['Monitor closely'],
                'escalation_factors': []
            }
    
    def _extract_pending_items(self, knowledge_tree: Dict) -> List[Dict]:
        """Extract pending decisions and actions"""
        pending = []
        
        # From insights
        insights = knowledge_tree.get('insights', {})
        for analyst_type, categories in insights.items():
            if isinstance(categories, dict):
                if 'decisions' in categories:
                    pending.extend([d for d in categories['decisions'] 
                                  if 'pending' in str(d).lower()])
                if 'action_required' in categories:
                    pending.extend(categories['action_required'])
        
        return pending
    
    async def _predict_action_timing(self, item: Dict, knowledge_tree: Dict) -> Dict:
        """Predict optimal timing for an action"""
        # Analyze various timing factors
        prompt = f"""Analyze optimal timing for this action:

Action/Decision: {json.dumps(item)}

Consider:
- Current momentum in related areas
- Resource availability
- Market conditions
- Relationship readiness

Provide:
1. Optimal time (specific)
2. Success rate if done at optimal time
3. Confidence in prediction
4. Key timing factors
5. Preparation needed
6. Risks of delay

Format as JSON."""

        response = await asyncio.to_thread(
            self.claude.messages.create,
            model="claude-3-opus-20240229",
            max_tokens=1000,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            return json.loads(response.content[0].text)
        except:
            return {
                'optimal_time': 'Within 2 weeks',
                'success_rate': 0.7,
                'confidence': 0.6,
                'timing_factors': ['Current momentum'],
                'preparation': ['Gather resources'],
                'delay_risks': ['Lost opportunity']
            }
    
    def _is_urgent(self, prediction: Prediction) -> bool:
        """Check if a prediction requires urgent action"""
        urgent_indicators = [
            prediction.time_horizon in ['immediate', 'next 7 days', 'this week'],
            prediction.prediction_type == 'risk_scenario' and prediction.probability > 0.7,
            any('urgent' in action.get('priority', '').lower() 
                for action in prediction.recommended_actions)
        ]
        return any(urgent_indicators)
    
    def _is_important(self, prediction: Prediction) -> bool:
        """Check if a prediction is strategically important"""
        return (
            prediction.confidence > 0.7 and 
            prediction.probability > 0.6 and
            prediction.prediction_type in ['opportunity_window', 'relationship_trajectory']
        )
    
    def _determine_urgency(self, prediction: Prediction, category: str) -> str:
        """Determine urgency level for an insight"""
        if category == 'immediate' or self._is_urgent(prediction):
            return 'immediate'
        elif prediction.time_horizon in ['next 30 days', 'this month']:
            return 'short_term'
        else:
            return 'long_term'
    
    def _determine_impact(self, prediction: Prediction) -> str:
        """Determine impact level for an insight"""
        if prediction.probability > 0.8 and prediction.confidence > 0.7:
            return 'high'
        elif prediction.probability > 0.6 or prediction.confidence > 0.6:
            return 'medium'
        else:
            return 'low'

# Global instance
predictive_engine = PredictiveIntelligenceEngine(storage_manager, claude_client)