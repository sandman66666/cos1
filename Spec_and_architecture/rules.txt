üîß AI Chief of Staff - Development Rules & Guidelines (v3.0)

Production Application Guidelines for Mature Flask Implementation

‚∏ª

üéØ Core Development Principles

1. AI-First Approach
   ‚Ä¢ Use Claude 4 Sonnet as the primary AI agent for all intelligent processing
   ‚Ä¢ Power as much functionality as possible with Claude AI to make the product great and unique
   ‚Ä¢ Leverage AI for business intelligence, not just simple automation
   ‚Ä¢ Always prefer AI-driven solutions over rule-based approaches

2. Quality & Testing Standards
   ‚Ä¢ Test each enhancement automatically and at every step
   ‚Ä¢ Test the full flow end-to-end after any changes
   ‚Ä¢ Store all test files in the test_files/ folder with real data
   ‚Ä¢ Never use fake data as fallback - always use real Gmail data for testing
   ‚Ä¢ Validate multi-tenant isolation after every user-related change

3. Product Vision & Uniqueness
   ‚Ä¢ Goal: Be the best AI assistant for professional work and business intelligence
   ‚Ä¢ Find interesting and unique approaches to make the product stand out
   ‚Ä¢ Focus on strategic business value, not just email management
   ‚Ä¢ Emphasize insights, relationships, and intelligence over simple organization

4. Code Architecture & Maintenance
   ‚Ä¢ Never create huge files with tons of code
   ‚Ä¢ Architect like the best coder in the world - modular, clean, maintainable
   ‚Ä¢ Keep functionality in separate, focused files
   ‚Ä¢ Follow the existing Flask application structure
   ‚Ä¢ Maintain clean separation between AI processing, data models, and web interface

‚∏ª

üèóÔ∏è Application Architecture Rules

1. Multi-Tenant Architecture (CRITICAL)
   ‚Ä¢ System is multi-tenant from day one - store everything per authenticated user
   ‚Ä¢ Use session['db_user_id'] for all database queries
   ‚Ä¢ Never mix user data or allow cross-user access
   ‚Ä¢ Test user isolation rigorously after any database changes
   ‚Ä¢ Use UUID-based session tracking for security

2. Database & Storage
   ‚Ä¢ Use SQLAlchemy models for all data persistence
   ‚Ä¢ Maintain proper foreign key relationships with user isolation
   ‚Ä¢ SQLite for development, PostgreSQL for production (Heroku)
   ‚Ä¢ All user data must be linked to User.id for proper isolation
   ‚Ä¢ Store sensitive tokens securely with user-specific paths

3. Security & Authentication
   ‚Ä¢ Google OAuth 2.0 with proper state validation
   ‚Ä¢ Secure session management with timeout and cleanup
   ‚Ä¢ Environment variables for all secrets (no hardcoded keys)
   ‚Ä¢ CSRF protection and secure token storage
   ‚Ä¢ Regular security audits of session handling

‚∏ª

üìÅ File Organization & Code Quality

1. Project Structure Maintenance
   ‚Ä¢ Follow the established structure in Spec_and_architecture/Structure.txt
   ‚Ä¢ chief_of_staff_ai/ contains all AI processing modules
   ‚Ä¢ templates/ and static/ for web interface components
   ‚Ä¢ Keep main.py focused on Flask routes and application logic
   ‚Ä¢ Place business logic in appropriate chief_of_staff_ai/ modules

2. File Management
   ‚Ä¢ When creating a new file that replaces an old one, delete the old one
   ‚Ä¢ If you can't delete, move old files to an archive/ folder
   ‚Ä¢ Keep related functionality grouped in logical modules
   ‚Ä¢ Use descriptive filenames that clearly indicate purpose

3. Code Review & Quality
   ‚Ä¢ Review code 3 times before suggesting user run the server
   ‚Ä¢ Ensure code is clean, well-documented, and follows patterns
   ‚Ä¢ Check for proper error handling and logging
   ‚Ä¢ Validate all user inputs and API responses
   ‚Ä¢ Test edge cases and error conditions

‚∏ª

üöÄ Deployment & Environment

1. Local Development
   ‚Ä¢ Basic HTML pages are fine for testing new functionality
   ‚Ä¢ Use Flask debug mode for rapid iteration
   ‚Ä¢ SQLite database for quick development cycles
   ‚Ä¢ Comprehensive logging for debugging and monitoring

2. Cloud Deployment
   ‚Ä¢ System runs on Heroku with proper configuration
   ‚Ä¢ PostgreSQL database for production persistence
   ‚Ä¢ Environment variable configuration for all settings
   ‚Ä¢ Gunicorn WSGI server for production performance

3. Environment Configuration
   ‚Ä¢ Use .env file for local development secrets
   ‚Ä¢ Heroku environment variables for production
   ‚Ä¢ Never commit secrets or API keys to repository
   ‚Ä¢ Support both development and production configurations

‚∏ª

üîß Enhancement Development Guidelines

1. Email Quality & Filtering Enhancements
   ‚Ä¢ Refine Claude prompts for better significance detection
   ‚Ä¢ Implement smart filtering before AI processing
   ‚Ä¢ Add quality scoring to email models
   ‚Ä¢ Test with real newsletter and promotional emails

2. Gmail Linking System
   ‚Ä¢ Generate proper Gmail search URLs for all references
   ‚Ä¢ Test links work correctly across different Gmail interfaces
   ‚Ä¢ Preserve email thread context and relationships
   ‚Ä¢ Validate search queries return expected results

3. Topic Management Features
   ‚Ä¢ Build user-friendly topic management interfaces
   ‚Ä¢ Implement topic merging with historical data migration
   ‚Ä¢ Test topic hierarchy relationships and constraints
   ‚Ä¢ Validate content recategorization accuracy

4. People Network Analysis
   ‚Ä¢ Enhance signature parsing with real email examples
   ‚Ä¢ Test relationship classification accuracy
   ‚Ä¢ Validate professional context extraction
   ‚Ä¢ Ensure privacy and data handling compliance

‚∏ª

üß™ Testing & Validation Requirements

1. Real Data Testing
   ‚Ä¢ Use actual Gmail data for all functionality testing
   ‚Ä¢ Test with multiple user accounts and scenarios
   ‚Ä¢ Validate AI processing accuracy with real content
   ‚Ä¢ Test edge cases with unusual email formats

2. Multi-Tenant Validation
   ‚Ä¢ Test user isolation after every database change
   ‚Ä¢ Validate session security and cleanup
   ‚Ä¢ Test concurrent user scenarios
   ‚Ä¢ Ensure no data leakage between users

3. Performance & Reliability
   ‚Ä¢ Test dashboard load times and responsiveness
   ‚Ä¢ Validate API endpoint performance under load
   ‚Ä¢ Test error handling and graceful failure recovery
   ‚Ä¢ Monitor Claude API usage and rate limiting

‚∏ª

üí° AI Integration Best Practices

1. Claude 4 Sonnet Optimization
   ‚Ä¢ Craft precise prompts for specific business intelligence tasks
   ‚Ä¢ Use confidence scoring for AI-generated insights
   ‚Ä¢ Implement proper error handling for AI service failures
   ‚Ä¢ Monitor and optimize AI processing costs

2. Context & Memory Management
   ‚Ä¢ Maintain conversation context for chat features
   ‚Ä¢ Store AI insights with proper source attribution
   ‚Ä¢ Enable cross-reference capabilities between insights
   ‚Ä¢ Preserve user preferences and interaction history

3. Business Intelligence Focus
   ‚Ä¢ Extract strategic insights, not just operational tasks
   ‚Ä¢ Focus on relationships, trends, and decision support
   ‚Ä¢ Provide actionable intelligence for business users
   ‚Ä¢ Connect insights across emails, people, and projects

‚∏ª

üéØ Current Development Focus

Immediate Priorities:
1. Email quality filtering and significance detection
2. Gmail linking system for source verification
3. Topic management and organization features

Quality Standards:
‚Ä¢ Maintain sub-2-second dashboard load times
‚Ä¢ Achieve 95%+ accuracy in actionable task extraction
‚Ä¢ Ensure 100% email-to-insight traceability
‚Ä¢ Preserve professional-grade UI/UX standards

Success Metrics:
‚Ä¢ User satisfaction with email relevance and quality
‚Ä¢ Time saved through intelligent filtering and organization
‚Ä¢ Accuracy of AI-generated business insights
‚Ä¢ System reliability and performance consistency

‚∏ª

Remember: This is a production business intelligence platform, not a simple email client. Every enhancement should focus on providing strategic value and unique AI-powered insights that help users make better business decisions and manage professional relationships more effectively.