=============================================================================
                    AI CHIEF OF STAFF - END-TO-END ARCHITECTURE
                        Complete System Architecture Document
                           UPDATED: TACTICAL KNOWLEDGE TREE APPROACH
=============================================================================

PRODUCT OVERVIEW:
================
AI Chief of Staff is a sophisticated business intelligence platform that transforms 
your Gmail and Calendar into a proactive AI assistant. It reads your emails, 
understands your professional relationships, and provides strategic business insights 
through advanced AI processing powered by Claude 4 Sonnet.

**CRITICAL ARCHITECTURE: "KNOWLEDGE TREE FIRST" APPROACH**
===========================================================

Unlike traditional email processing systems, this platform:
1. **FIRST** builds a comprehensive master knowledge tree from ALL emails
2. **THEN** assigns individual emails to this tree structure  
3. **FINALLY** uses the knowledge tree to extract tactical tasks and augment data

This ensures consistency, context-awareness, and prevents over-generation of tasks.

ARCHITECTURE LAYERS:
===================

1. FRONTEND LAYER (React + TypeScript)
   - **Settings UI**: Reorganized 3-step knowledge-first workflow
   - **Dashboard**: Real-time business intelligence display
   - **Knowledge Tree Modal**: Tree visualization and management
   - **Chat Interface**: Context-aware AI assistant

2. BACKEND LAYER (Flask + Python)
   - **Email Routes**: Knowledge tree building and email assignment
   - **Task Routes**: NEW tactical task creation with confidence thresholds
   - **People Routes**: NEW knowledge-enhanced people augmentation
   - **Calendar Routes**: NEW meeting intelligence with attendee analysis
   - **Intelligence Routes**: Business insights and chat with knowledge context

3. AI PROCESSING LAYER (Claude 4 Sonnet)
   - **External Prompt Management**: All prompts now in prompts/ directory
   - **Knowledge Tree Prompts**: build_initial_tree.txt, refine_existing_tree.txt
   - **Tactical Task Prompts**: 360_task_extraction.txt with high selectivity
   - **Business Intelligence**: Enhanced context-aware processing

4. DATA INTEGRATION LAYER
   - **Gmail API**: Email fetching with quality filtering
   - **Calendar API**: Meeting data with attendee intelligence
   - **Contact Analysis**: Tier-based filtering (Tier 1/2/Last)

5. STORAGE LAYER (SQLite/PostgreSQL)
   - **Knowledge Trees**: JSON storage with user-specific trees
   - **Email Processing**: Strategic importance scoring
   - **Enhanced People**: Knowledge tree augmented profiles
   - **Tactical Tasks**: High-confidence, context-aware tasks

6. INTELLIGENCE LAYER
   - **Master Knowledge Tree**: Central business context repository
   - **Tactical Task Engine**: 0.7+ confidence threshold
   - **People Augmentation**: Relationship and project mapping
   - **Meeting Intelligence**: Attendee analysis and prep tasks

THE NEW WORKFLOW:
================

**STEP 1: BUILD CONTACT BASE**
ðŸ”„ Fetch Sent Emails â†’ ðŸ”„ Build Contact Rules â†’ ðŸ”„ Fetch Calendar Events

Files Involved:
- `api/routes/email_routes.py`: extract_sent_contacts endpoint
- `chief_of_staff_ai/engagement_analysis/smart_contact_strategy.py`
- `api/routes/calendar_routes.py`: calendar sync

Story: System analyzes sent emails to identify trusted contacts (Tier 1), 
builds contact tier rules, and fetches calendar events for relationship context.

**STEP 2: BUILD KNOWLEDGE TREE** (CORE INNOVATION)
ðŸ”„ Fetch All Emails â†’ ðŸŒ³ Build/Refine Tree â†’ ðŸ“§ Assign Emails to Tree

Files Involved:
- `api/routes/email_routes.py`: 
  * `build_knowledge_tree()` - Creates master tree
  * `assign_emails_to_tree()` - Categorizes emails
- `prompts/knowledge_tree/build_initial_tree.txt`
- `prompts/knowledge_tree/refine_existing_tree.txt`
- `prompts/knowledge_tree/assign_email_to_tree.txt`
- `knowledge_trees/user_X_master_tree.json`

Story: 
1. System fetches ALL emails as one mega corpus
2. Claude analyzes complete email history and builds MASTER knowledge tree with:
   - Topics & subtopics (business themes)
   - People & relationships (key contacts)
   - Projects & initiatives (ongoing work)
   - Business context (industry, role, focus areas)
3. Master tree saved as JSON structure
4. Individual emails assigned to appropriate tree categories
5. Each email gets: primary_topic, related_people, related_projects, importance_score

**STEP 3: AUGMENT WITH KNOWLEDGE** (TACTICAL ENHANCEMENT)
âœ… Create Tactical Tasks â†’ ðŸ‘¥ Augment People â†’ ðŸ“… Augment Meetings

Files Involved:
- `api/routes/task_routes.py`: create_tactical_tasks endpoint
- `api/routes/people_routes.py`: augment_people_with_knowledge endpoint  
- `api/routes/calendar_routes.py`: augment_meetings_with_knowledge endpoint
- `prompts/task_extraction/360_task_extraction.txt` (enhanced for tactical focus)

Story:
1. **Create Tactical Tasks**: Uses knowledge tree to extract ONLY obvious, high-confidence 
   tasks (0.7+ threshold) from categorized emails. Focuses on tactical deliverables, 
   not strategic follow-ups.

2. **Augment People**: Enhances people profiles with knowledge tree data:
   - Role and company information
   - Relationship strength scores
   - Primary business topics
   - Related projects and strategic importance

3. **Augment Meetings**: Enhances calendar events with:
   - Attendee intelligence from knowledge tree
   - Related topics and projects
   - Automatically generated preparation tasks
   - Strategic meeting classification

KEY ARCHITECTURAL IMPROVEMENTS:
==============================

**1. TACTICAL TASK EXTRACTION**
   - Confidence threshold: 0.7+ (vs previous 0.5)
   - Rejects vague "follow up" tasks
   - Focuses on concrete deliverables
   - Uses knowledge tree context for prioritization

**2. PROMPT EXTERNALIZATION**
   - All AI prompts moved to `prompts/` directory
   - Easy editing without code changes
   - Documented goals and context for each prompt
   - Version control for prompt evolution

**3. KNOWLEDGE-FIRST PROCESSING**
   - Master tree built from complete email corpus
   - Consistent categorization across all emails
   - Context-aware task extraction
   - Strategic relationship mapping

**4. ENHANCED DATA QUALITY**
   - Contact tier filtering (removes low-value contacts)
   - Strategic importance scoring
   - Business context augmentation
   - Meeting preparation automation

BUSINESS INTELLIGENCE OUTPUT:
============================

After complete processing, the system provides:

**ðŸ“Š Dashboard Metrics**
- Real-time intelligence quality scores
- Contact tier statistics
- Knowledge tree coverage
- Task completion analytics

**ðŸ‘¥ People Intelligence**
- Relationship strength mapping
- Business context profiles
- Project collaboration analysis
- Strategic contact identification

**ðŸ“§ Email Intelligence**  
- Topic-based categorization
- Strategic importance scoring
- Automated task extraction
- Business context analysis

**ðŸ“… Meeting Intelligence**
- Attendee relationship analysis
- Topic and project connections
- Automated preparation tasks
- Strategic meeting identification

**ðŸ’¬ AI Chat with Context**
- Knowledge tree-aware responses
- Business intelligence integration
- Strategic decision support
- Relationship-informed advice

FILES SUMMARY:
=============

**Core Processing Files:**
- `api/routes/email_routes.py` - Knowledge tree building and management
- `api/routes/task_routes.py` - Tactical task creation
- `api/routes/people_routes.py` - People augmentation
- `api/routes/calendar_routes.py` - Meeting intelligence
- `frontend/src/components/SettingsPage.tsx` - Updated workflow UI

**Prompt Files:**
- `prompts/knowledge_tree/` - Master tree building prompts
- `prompts/task_extraction/360_task_extraction.txt` - Tactical task prompt
- `prompts/email_intelligence/` - Business intelligence prompts
- `prompts/prompt_loader.py` - Centralized prompt management

**Storage:**
- `knowledge_trees/user_X_master_tree.json` - Master knowledge trees
- Database tables: emails, people, tasks, calendar_events (enhanced)

**THE COMPLETE STORY:**
======================

1. **Foundation Phase**: System builds trusted contact base from sent emails and calendar

2. **Knowledge Tree Phase**: Claude analyzes ALL emails together, creates master 
   knowledge structure, then assigns each email to appropriate categories

3. **Tactical Enhancement Phase**: Using knowledge tree context, system creates 
   high-confidence tactical tasks, enhances people profiles, and augments meetings 
   with intelligence

4. **Continuous Intelligence**: AI chat and dashboard provide knowledge-aware 
   insights and strategic support

**RESULT**: A business intelligence system that truly "gets" your business context 
and provides tactical, actionable insights rather than generic email processing.


DETAILED COMPONENT BREAKDOWN:
============================

FRONTEND COMPONENTS (frontend/):
-------------------------------
â€¢ frontend/src/App.tsx (102KB, 2,595 lines)
  - Main React application component
  - Dashboard with intelligence metrics and insights
  - Real-time UI updates and state management
  - Component routing and user interface orchestration
  - **KnowledgeTreeModal component** for viewing the master tree structure

â€¢ frontend/src/components/ (Directory)
  - Modular React components for each feature
  - Dashboard widgets, task lists, people grids
  - Calendar views, settings panels, chat interface

â€¢ frontend/package.json
  - React dependencies and build configuration
  - Scripts for development and production builds

â€¢ frontend/tailwind.config.js + postcss.config.js
  - Modern CSS framework configuration
  - Responsive design and theming system


BACKEND CORE FILES:
------------------
â€¢ main.py (678 lines)
  - Flask application entry point and configuration
  - Google OAuth authentication flow
  - Session management with user isolation
  - Strategic business insights generation engine
  - Route handlers redirecting to React frontend

â€¢ api/ (Directory - Modular API Architecture)
  - api/routes/auth_routes.py - Authentication endpoints
  - **api/routes/email_routes.py** - Email sync, knowledge tree building, and categorization
  - api/routes/intelligence_routes.py - AI insights and analytics
  - api/routes/task_routes.py - Task management and extraction
  - api/routes/people_routes.py - Relationship intelligence
  - api/routes/calendar_routes.py - Meeting preparation and analysis
  - api/routes/settings_routes.py - User preferences and configuration


KNOWLEDGE TREE SYSTEM (THE CORE INNOVATION):
============================================

**Master Knowledge Tree Files (knowledge_trees/):**
â€¢ knowledge_trees/user_{id}_master_tree.json
  - Comprehensive topic hierarchy built from ALL emails
  - People relationships and roles mapped to topics
  - Projects and initiatives with associated people/topics
  - Business context (industry, role, company stage, focus areas)
  - Relationship mappings between all entities

**Key Functions in api/routes/email_routes.py:**
â€¢ build_initial_knowledge_tree() - Creates master tree from email corpus
â€¢ refine_knowledge_tree() - Updates tree when new themes emerge  
â€¢ assign_email_to_knowledge_tree() - Categorizes individual emails using tree
â€¢ get_master_knowledge_tree() - Retrieves stored tree for user
â€¢ save_master_knowledge_tree() - Persists tree structure

**API Endpoints for Knowledge Tree Operations:**
â€¢ POST /api/emails/build-knowledge-tree - Build/refine master tree
â€¢ POST /api/emails/assign-to-tree - Categorize emails using existing tree
â€¢ GET /api/emails/knowledge-tree - Get current master tree structure


AI PROCESSING ENGINES (chief_of_staff_ai/processors/):
-----------------------------------------------------
â€¢ email_intelligence.py (100KB, 1,996 lines)
  - **ENHANCED**: Uses master knowledge tree as context for email analysis
  - Strategic importance scoring within established topic framework
  - Task extraction linked to pre-defined projects and topics
  - Relationship intelligence mapped to known entity network

â€¢ email_quality_filter.py (32KB, 723 lines)
  - Contact tier classification (Tier 1/2/Last)
  - Response rate analysis and engagement scoring
  - Quality filtering to prevent spam pollution
  - Smart contact relationship management

â€¢ knowledge_engine.py (39KB, 914 lines)
  - **CRITICAL**: Builds foundation knowledge hierarchy from email corpus
  - build_topic_hierarchy_from_content() - Creates comprehensive topic tree
  - Topic relationship analysis and hierarchical structuring
  - Integration with tree-based categorization system

â€¢ intelligence_engine.py (30KB, 651 lines)
  - Business intelligence generation using knowledge tree context
  - Relationship decay prediction within established network
  - Opportunity detection using topic momentum from tree
  - Cross-entity analysis using pre-mapped relationships

â€¢ task_extractor.py (49KB, 1,157 lines)
  - **TREE-CONTEXTUAL**: Task identification using knowledge tree categories
  - Links extracted tasks to pre-defined projects and topics
  - Priority scoring within business context from tree
  - Action item categorization using established taxonomy

â€¢ realtime_processor.py (33KB, 755 lines)
  - Continuous processing using established knowledge tree
  - Real-time categorization of new emails against master tree
  - Live updates to topic momentum and relationship scores
  - Event-driven updates within consistent categorization framework


DATABASE MODELS (chief_of_staff_ai/models/):
-------------------------------------------
â€¢ database.py (106KB, 2,418 lines)
  - Core SQLAlchemy models and database schema
  - User, Email, Person, Task, Project, Topic entities
  - Complex relationships and foreign key constraints
  - Database manager with user isolation and security

â€¢ enhanced_models.py (19KB, 450 lines)
  - Intelligence-enhanced model extensions
  - **TopicHierarchy model** for structured knowledge tree storage
  - Engagement scoring and relationship metrics
  - AI metadata and processing status tracking

â€¢ knowledge_models.py (17KB, 436 lines)
  - **TopicHierarchy class** with hierarchical relationships
  - Knowledge graph and entity relationship models
  - Topic clustering and theme analysis structures
  - Tree-based knowledge storage and retrieval


CORRECTED END-TO-END PROCESS FLOW STORY:
========================================

STEP 1: USER AUTHENTICATION & SETUP
------------------------------------
Files Involved:
- main.py (routes: /auth/google, /auth/google/callback)
- chief_of_staff_ai/auth/gmail_auth.py
- frontend/src/App.tsx (login components)

Story:
1. User visits the application at localhost:5000
2. main.py redirects to React frontend at localhost:3000
3. React app detects no authentication, shows login button
4. User clicks "Sign in with Google", triggering /auth/google
5. Gmail auth handler generates OAuth URL with proper scopes
6. User authorizes Gmail and Calendar access on Google
7. Google redirects back to /auth/google/callback with authorization code
8. Backend exchanges code for access tokens
9. User profile is created/retrieved from database.py models
10. Secure session established with user isolation
11. React frontend receives authentication success and loads dashboard

STEP 2: EMAIL FETCHING & QUALITY FILTERING
------------------------------------------
Files Involved:
- chief_of_staff_ai/processors/email_quality_filter.py
- chief_of_staff_ai/ingest/gmail_fetcher.py
- api/routes/email_routes.py

Story:
1. User clicks "Sync Intelligence" button in React frontend
2. Frontend sends POST request to /api/trigger-email-sync
3. Gmail fetcher connects to Gmail API using stored OAuth tokens
4. System fetches ALL emails in bulk (configurable: 5-500 emails)
5. Email quality filter analyzes user's response patterns:
   - Tier 1: People user regularly responds to (high quality)
   - Tier 2: New contacts or occasional responses (medium quality)
   - Tier Last: People user consistently ignores (filtered out)
6. Quality-filtered emails are prepared for master tree building
7. Contact tier data is saved to database for future filtering

**STEP 3: MASTER KNOWLEDGE TREE GENERATION (THE KEY INNOVATION)**
----------------------------------------------------------------
Files Involved:
- api/routes/email_routes.py (build_initial_knowledge_tree function)
- knowledge_trees/user_{id}_master_tree.json
- Anthropic Claude 4 Sonnet API

Story:
1. **MEGA FILE CREATION**: All quality-filtered emails are bundled into one comprehensive dataset
2. **MASTER TREE PROMPT**: System sends the ENTIRE email corpus to Claude with this instruction:
   "Build a MASTER knowledge tree that will be used to categorize ALL future emails consistently"
3. **COMPREHENSIVE ANALYSIS**: Claude analyzes the complete communication history and creates:
   - **Topics & Subtopics**: Hierarchical business themes specific to user's work
   - **People & Relationships**: Key contacts mapped to topics with relationship strength
   - **Projects & Initiatives**: Active work mapped to people and topics
   - **Business Context**: Industry, role, company stage, key focus areas
   - **Entity Relationships**: How all components connect together
4. **TREE STRUCTURE CREATION**: Claude returns a comprehensive JSON structure with:
   ```json
   {
     "topics": [{"name": "Fundraising", "subtopics": [...], "importance": 0.9}],
     "people": [{"email": "investor@vc.com", "primary_topics": ["Fundraising"]}],
     "projects": [{"name": "Series A", "related_topics": ["Fundraising"]}],
     "business_context": {"industry": "Technology", "role": "Founder"}
   }
   ```
5. **TREE PERSISTENCE**: Master tree saved to knowledge_trees/user_{id}_master_tree.json
6. **FOUNDATION ESTABLISHED**: This tree becomes the authoritative categorization framework

**STEP 4: EMAIL CATEGORIZATION USING MASTER TREE (THE CONSISTENCY ENGINE)**
--------------------------------------------------------------------------
Files Involved:
- api/routes/email_routes.py (assign_email_to_knowledge_tree function)
- knowledge_trees/user_{id}_master_tree.json (as context)
- Anthropic Claude 4 Sonnet API

Story:
1. **INDIVIDUAL EMAIL PROCESSING**: For each email, system sends BOTH:
   - The individual email content
   - The COMPLETE master knowledge tree as context
2. **TREE-CONSTRAINED CATEGORIZATION**: Claude prompt specifically instructs:
   "Use ONLY topics, people, and projects that exist in the provided knowledge tree"
3. **CONSISTENT CLASSIFICATION**: Each email gets categorized with:
   - Primary topic (must exist in tree)
   - Secondary topics (must exist in tree)
   - Related people (must exist in tree)
   - Related projects (must exist in tree)
   - Summary contextualizing email within the established knowledge framework
4. **STRUCTURED INSIGHTS**: Every email analysis is consistent because it uses the same taxonomy
5. **CUMULATIVE INTELLIGENCE**: Insights build upon each other within consistent categories

**STEP 5: KNOWLEDGE TREE REFINEMENT & EVOLUTION**
------------------------------------------------
Files Involved:
- api/routes/email_routes.py (refine_knowledge_tree function)
- knowledge_trees/user_{id}_master_tree.json (updated)

Story:
1. **NEW EMAIL BATCHES**: When processing new emails, system checks if new themes emerge
2. **TREE EVALUATION**: System determines if master tree needs updating based on:
   - New people appearing frequently
   - New topics that don't fit existing categories
   - Changes in business focus or priorities
3. **INTELLIGENT REFINEMENT**: If updates needed, Claude receives:
   - Current master tree
   - New emails that suggest changes
   - Instructions to refine (not rebuild) the tree
4. **EVOLUTIONARY UPDATES**: Tree evolves while maintaining consistency:
   - New categories added only when genuinely needed
   - Existing categories preserved for consistency
   - Importance scores updated based on new activity
5. **MAINTAINED COHERENCE**: All previously categorized emails remain valid within updated tree

STEP 6: STRATEGIC BUSINESS INSIGHTS WITH TREE CONTEXT
----------------------------------------------------
Files Involved:
- main.py (get_strategic_business_insights function)
- chief_of_staff_ai/processors/intelligence_engine.py
- knowledge_trees/user_{id}_master_tree.json (as authoritative source)

Story:
1. **TREE-BASED INTELLIGENCE**: All strategic insights generated using established knowledge tree
2. **CONSISTENT CATEGORIES**: Business insights reference known topics, people, and projects
3. **CROSS-TREE ANALYSIS**: System identifies patterns across tree categories:
   - Which topics have high activity but low attention
   - Which relationships are decaying within known network
   - Which projects need attention based on established priorities
4. **CONTEXTUAL RECOMMENDATIONS**: All suggestions use the established business vocabulary
5. **CUMULATIVE LEARNING**: Insights improve because they build on consistent categorization

STEP 7: REAL-TIME PROCESSING WITH ESTABLISHED FRAMEWORK
------------------------------------------------------
Files Involved:
- chief_of_staff_ai/processors/realtime_processor.py
- knowledge_trees/user_{id}_master_tree.json (continuous reference)

Story:
1. **NEW EMAIL ARRIVAL**: When new emails arrive, they're immediately categorized using existing tree
2. **INSTANT CLASSIFICATION**: No need to "learn" categories - they already exist in the tree
3. **CONSISTENT UPDATES**: All metrics and insights updated within established framework
4. **COHERENT INTELLIGENCE**: New insights connect to existing knowledge structure
5. **MAINTAINED CONTEXT**: User sees consistent categories and relationships over time


KEY ARCHITECTURAL ADVANTAGES OF KNOWLEDGE TREE FIRST APPROACH:
=============================================================

1. **CONSISTENT CATEGORIZATION**
   - All emails use the same taxonomy and vocabulary
   - No category drift or inconsistent naming over time
   - Business intelligence builds coherently over time

2. **COMPREHENSIVE UNDERSTANDING**
   - Tree built from complete communication history
   - Captures full business context, not just recent emails
   - Better topic hierarchy and relationship mapping

3. **SCALABLE FRAMEWORK**
   - New emails instantly fit into established categories
   - No need to rebuild understanding with each email
   - Consistent user experience regardless of volume

4. **INTELLIGENT EVOLUTION**
   - Tree can be refined when business changes
   - Maintains historical consistency while adapting
   - Prevents category explosion and confusion

5. **SUPERIOR BUSINESS INTELLIGENCE**
   - Cross-category analysis possible because categories are stable
   - Trend analysis meaningful because taxonomy is consistent
   - Strategic insights based on established business vocabulary


TECHNOLOGY STACK SUMMARY:
=========================

Frontend:
- React 18 with TypeScript
- Tailwind CSS for styling
- PostCSS for CSS processing
- Modern ES6+ JavaScript
- **Knowledge Tree Visualization Components**

Backend:
- Python 3.10+ with Flask
- SQLAlchemy for database ORM
- Flask-Session for session management
- Flask-CORS for cross-origin requests
- **JSON-based Knowledge Tree Storage**

AI & Integration:
- **Anthropic Claude 4 Sonnet API** (Two-stage processing: Tree Building + Email Categorization)
- Google Gmail API
- Google Calendar API
- Google OAuth 2.0

Database & Storage:
- SQLite for development with **TopicHierarchy models**
- **File-based knowledge tree storage** (knowledge_trees/ directory)
- Complex relational schema with tree integration
- User data isolation

DevOps & Deployment:
- Heroku deployment pipeline
- Environment configuration
- Automated dependency management
- Production monitoring and logging

=============================================================================
This architecture creates a sophisticated AI-powered business intelligence 
platform that uses a "Knowledge Tree First" approach to ensure consistent, 
comprehensive, and scalable email intelligence that builds coherently over time.

The key innovation is building the complete knowledge framework FIRST, then 
using it as an authoritative context for all subsequent email processing, 
ensuring consistent categorization and cumulative business intelligence.
============================================================================= 